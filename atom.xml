<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><title type="text">life worth</title><subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle><updated>2021-07-12T02:14:16+00:00</updated><id>https://xs-cw.github.io/</id><link rel="alternate" type="text/html" href="https://xs-cw.github.io/"/><link rel="self" type="application/atom+xml" href="https://xs-cw.github.io/atom.xml"/><author><name>saltfish</name><uri>https://xs-cw.github.io/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><generator uri="https://gohugo.io/" version="0.85.0">Hugo</generator><entry><title type="text">跨域问题</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/generics/"/><id>https://xs-cw.github.io/posts/generics/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2021-07-11T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">go泛型试用 环境 Go1.17beta 使用命令 go build -gcflags=-G=3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import &amp;#34;fmt&amp;#34; type name[T……</summary><content type="html">&lt;h3 id="go泛型试用">go泛型试用&lt;/h3>
&lt;p>环境 Go1.17beta&lt;/p>
&lt;p>使用命令 &lt;code>go build -gcflags=-G=3 &lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="nx">any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">data&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">T&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">mapFunc&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">vi&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">vi&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">mapFunc&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">mapFunc&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>也可以基于&lt;code>dev.go2go&lt;/code>分支构建go，使用&lt;code>go tool build xx.go2&lt;/code> 构建生成 .go文件&lt;/p>
&lt;/blockquote></content><category scheme="https://xs-cw.github.io/categories/%E6%B3%9B%E5%9E%8B/" term="泛型" label="泛型"/><category scheme="https://xs-cw.github.io/tags/golang/" term="golang" label="golang"/><category scheme="https://xs-cw.github.io/tags/go/" term="go" label="go"/></entry><entry><title type="text">Questions-2021</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/question_2021/"/><id>https://xs-cw.github.io/posts/question_2021/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2021-03-07T10:42:49+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">mysql 事务隔离 mvcc 三个日志 B+ tree 索引 优化，索引失效 组合索引 回表 分库分表 自增id，雪片算法ID……</summary><content type="html">&lt;p>mysql&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事务隔离&lt;/p>
&lt;/li>
&lt;li>
&lt;p>mvcc&lt;/p>
&lt;/li>
&lt;li>
&lt;p>三个日志&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B+ tree&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引 优化，索引失效 组合索引&lt;/p>
&lt;/li>
&lt;li>
&lt;p>回表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分库分表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自增id，雪片算法ID，uuid 各自优缺点&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>redis&lt;/p>
&lt;ul>
&lt;li>redis为什么快&lt;/li>
&lt;li>常见场景，分布式锁redis与zookeeper有什么区别&lt;/li>
&lt;li>缓存一致性&lt;/li>
&lt;li>持久化 aof rdb&lt;/li>
&lt;li>淘汰机制 lru lof&lt;/li>
&lt;li>性能瓶颈&lt;/li>
&lt;li>多线程&lt;/li>
&lt;li>一致性hash&lt;/li>
&lt;li>位置计算，交集并集，延时队列，订阅模式&lt;/li>
&lt;li>底层数据结构&lt;/li>
&lt;/ul>
&lt;p>mq （kafka）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基本结构 topic，broker&lt;/p>
&lt;/li>
&lt;li>
&lt;p>丢消息，原理与处理方案&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用中的问题&lt;/p>
&lt;ul>
&lt;li>丢消息&lt;/li>
&lt;li>没有死信&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>零拷贝&lt;/p>
&lt;/li>
&lt;li>
&lt;p>落盘持久化&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>计算机基础&lt;/p>
&lt;ul>
&lt;li>cpu缓存结构&lt;/li>
&lt;li>进程，线程，协程的区别&lt;/li>
&lt;/ul></content><category scheme="https://xs-cw.github.io/categories/question/" term="question" label="question"/><category scheme="https://xs-cw.github.io/tags/question/" term="question" label="question"/></entry><entry><title type="text">Docker相关问题</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/docker-problems/"/><id>https://xs-cw.github.io/posts/docker-problems/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-05-05T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">docker for windows 启动kubernets问题 现象: docker desktop 启用kubernets后,一直处于star……</summary><content type="html">&lt;h3 id="docker-for-windows-启动kubernets问题">docker for windows 启动kubernets问题&lt;/h3>
&lt;ul>
&lt;li>现象:&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>docker desktop 启用kubernets后,一直处于&lt;code>starting&lt;/code>状态.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>原因:&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>启用后,kubernets所需镜像没有下载.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>解决:&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>建议卸载docker后,参照阿里云所提供的&lt;a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop">流程&lt;/a>.
重新安装docker,安装kubernets所需镜像,然后才启用kubernets.&lt;/p>
&lt;/blockquote>
&lt;h3 id="在wsl中使用docker">在wsl中使用docker&lt;/h3>
&lt;ul>
&lt;li>在wsl中安装&lt;code>docker-cli&lt;/code>,&lt;code>docker-compose&lt;/code>&lt;/li>
&lt;li>将&lt;code>DOCKER_HOST=tcp://localhost:2375&lt;/code>写入wsl环境变量中&lt;/li>
&lt;li>在 windows的docker desktop中启用&lt;code>Expose daeon on tcp:localhost:2375 without TLS&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="docker容器访问宿主机ip">docker容器访问宿主机ip&lt;/h3>
&lt;ul>
&lt;li>新版docker中&lt;code>host.docker.internal&lt;/code>代表宿主机,可以直接使用&lt;/li>
&lt;/ul></content><category scheme="https://xs-cw.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/" term="软件使用" label="软件使用"/><category scheme="https://xs-cw.github.io/categories/%E9%97%AE%E9%A2%98/" term="问题" label="问题"/><category scheme="https://xs-cw.github.io/tags/docker/" term="docker" label="docker"/><category scheme="https://xs-cw.github.io/tags/%E8%B8%A9%E5%9D%91/" term="踩坑" label="踩坑"/></entry><entry><title type="text">git相关</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/git/"/><id>https://xs-cw.github.io/posts/git/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-05-05T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">git添加多个远程 1 2 3 4 5 6 # 添加远端, 一次push到多个仓库 git remote set-url --add origin https://github.com/example/test.git # 查看远……</summary><content type="html">&lt;h3 id="git添加多个远程">git添加多个远程&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 添加远端, 一次push到多个仓库&lt;/span>
git remote set-url --add origin https://github.com/example/test.git
&lt;span class="c1"># 查看远端仓库&lt;/span>
git remote -v
&lt;span class="c1"># 添加远端仓库,pull/push时需要指定&lt;/span>
git remote set-url --add other https://other.test.com/zxbetter/test.git
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="git-贮藏">git 贮藏&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">git stash save &lt;span class="s2">&amp;#34;stash info&amp;#34;&lt;/span>
git stash pop
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://xs-cw.github.io/categories/git/" term="git" label="git"/><category scheme="https://xs-cw.github.io/tags/git/" term="git" label="git"/></entry><entry><title type="text">nginx相关</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/nginx/"/><id>https://xs-cw.github.io/posts/nginx/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-05-05T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">使用docker nginx代理前端,避免跨域问题 使用dokcer-compose 启动……</summary><content type="html">&lt;h3 id="使用docker-nginx代理前端避免跨域问题">使用docker nginx代理前端,避免跨域问题&lt;/h3>
&lt;ul>
&lt;li>使用dokcer-compose 启动nginx&lt;br>
&lt;code>docker-compose.yml&lt;/code>配置:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">nginx&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">container_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">80&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">443&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./conf/nginx:/etc/nginx/conf.d&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./log/nginx:/var/log/nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">./static:/var/www&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>nginx.conf&lt;/code>配置:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>前端项目设置host header&lt;/strong>&lt;br>
&lt;strong>&lt;code>host.docker.internal&lt;/code>是docker宿主机ip&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 代理前端项目
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">Host&lt;/span> &lt;span class="nv">$host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#docker nginx必须这样设置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://host.docker.internal:8080&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># 代理后端接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># 原先前端请求地址 http://localhost:9090/server/index
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1"># 修改成 http://localhost:9090/api/server/index
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/api&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># 接口地址修正
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">rewrite&lt;/span> &lt;span class="s">^/api/(.*)&lt;/span>$ &lt;span class="s">/&lt;/span>&lt;span class="nv">$1&lt;/span> &lt;span class="s">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 后端接口地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://host.docker.internal:9090&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></content><category scheme="https://xs-cw.github.io/categories/nginx%E7%BB%8F%E9%AA%8C/" term="nginx经验" label="nginx经验"/><category scheme="https://xs-cw.github.io/tags/nginx/" term="nginx" label="nginx"/><category scheme="https://xs-cw.github.io/tags/%E8%B8%A9%E5%9D%91/" term="踩坑" label="踩坑"/></entry><entry><title type="text">跨域问题</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/cors/"/><id>https://xs-cw.github.io/posts/cors/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-05-05T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">前端项目跨域问题 问题: 前端请求与页面地址不在同一域内. sechma://host:p……</summary><content type="html">&lt;h3 id="前端项目跨域问题">前端项目跨域问题&lt;/h3>
&lt;ul>
&lt;li>问题:
前端请求与页面地址不在同一域内.&lt;br>
&lt;code>sechma://host:port&lt;/code>如:&lt;code>http://localhost:8080&lt;/code>
三者有一个不相同都属于跨域.&lt;/li>
&lt;li>解决方案1: 后端新增拦截器或者中间件,允许跨域请求
如 &lt;code>gin&lt;/code>框架:
在路由上使用以下中间件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Cors&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">HandlerFunc&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">method&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Request&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Method&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Access-Control-Allow-Origin&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;*&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Access-Control-Allow-Headers&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Content-Type,AccessToken,X-CSRF-Token, Authorization, Token&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Access-Control-Allow-Methods&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;POST, GET, OPTIONS&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Access-Control-Expose-Headers&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Access-Control-Allow-Credentials&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">//放行所有OPTIONS方法
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">method&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s">&amp;#34;OPTIONS&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AbortWithStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">StatusNoContent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 处理请求
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Next&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>解决方案2: nginx代理前端&lt;br>
nginx配置如下:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-nginx" data-lang="nginx"> &lt;span class="k">server&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">listen&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">server_name&lt;/span> &lt;span class="s">localhost&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 代理前端项目
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">proxy_set_header&lt;/span> &lt;span class="s">Host&lt;/span> &lt;span class="nv">$host&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1">#docker nginx必须这样设置
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://host.docker.internal:8080&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1"># 代理后端接口
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">location&lt;/span> &lt;span class="s">/api&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1"># 接口地址修正
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">rewrite&lt;/span> &lt;span class="s">^/api/(.*)&lt;/span>$ &lt;span class="s">/&lt;/span>&lt;span class="nv">$1&lt;/span> &lt;span class="s">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="c1"># 后端接口地址
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kn">proxy_pass&lt;/span> &lt;span class="s">http://host.docker.internal:9090&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://xs-cw.github.io/categories/%E5%89%8D%E7%AB%AF/" term="前端" label="前端"/><category scheme="https://xs-cw.github.io/tags/%E5%89%8D%E7%AB%AF/" term="前端" label="前端"/><category scheme="https://xs-cw.github.io/tags/%E5%90%8E%E7%AB%AF/" term="后端" label="后端"/></entry><entry><title type="text">面试题</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/interview_case/"/><id>https://xs-cw.github.io/posts/interview_case/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-05-05T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">【2分】以下关于 linux 文件系统说法错误的是 A /proc是真实存在于磁盘上的目录 B /dev……</summary><content type="html">&lt;ol>
&lt;li>【2分】以下关于 linux 文件系统说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A /proc是真实存在于磁盘上的目录
B /dev/null和/dev/zero是一个特殊的设备文件，并不会存在于磁盘上
C /sys是sysfs文件系统挂载的标准位置
D cgroups系统通过读写文件与其交互
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="2">
&lt;li>【2分】如果由于某些原因需要查看多进程运行时的所有系统调用，可以使用什么命令&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A ptrace
B strace -f
C strace
D ptrace -f
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="3">
&lt;li>【2分】下面这段代码输出什么？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;B&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">counter&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">counter&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;A&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">counter&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">k&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;counter is &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">counter&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A 1
B 2
C 3
D 2 或 3
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="4">
&lt;li>【2分】存储器读写速率越高，每位的成本也越高，存储容量也小。解决这一问题的主要方法是采用&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A Cache
B 并行存储器
C 多级存储体系结构
D 缓冲技术
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="5">
&lt;li>【2分】以下关于CPU与主存之间增加高速缓存(cache)的叙述中，错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A cache扩充了主存储器的容量
B cache可以降低由于CPU与主存之间的速度差异造成的系统性能影响
C cache的有效性是利用了对主存储器访问的局部性特征
D cache通常保存着主存储器中部分内容的一份副本
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="6">
&lt;li>【2分】下面这段代码输出什么？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">increaseA&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">increaseB&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">r&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">increaseA&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">increaseB&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A 1 1
B 0 1
C 1 0
D 0 0
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="7">
&lt;li>【2分】已知字符串S为”abaabaabacacaabaabcc”，模式串t为”abaabc”。采用KMP算法进行匹配，第一次出现“失配”（s[i]!=t[j]）时，i=j=5，则下次开始匹配时，i和j的值分别是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A i=1 j=0
B i=5 j=0
C i=5 j=2
D i=6 j=2
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="8">
&lt;li>【2分】假设初始栈为空，在对中缀表达式 a/b+(c&lt;em>d-e&lt;/em>f)/g 转化为后缀表达式的过程中，当扫描到 f 时，栈中元素依次是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A + ( * -
B + ( - *
C / + ( * - *
D / + - *
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="9">
&lt;li>【2分】用哈希算法处理冲突时可能出现堆积现象，会受堆积直接影响的是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 储存效率
B 散列函数
C 装载因子
D 平均查找长度
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="10">
&lt;li>【2分】互斥锁，运行下面这段代码输出什么？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;sync&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">mu&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mutex&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">chain&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;main&amp;#34;&lt;/span>
&lt;span class="nf">A&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chain&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">mu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">chain&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; --&amp;gt; A&amp;#34;&lt;/span>
&lt;span class="nf">B&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">B&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">chain&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; --&amp;gt; B&amp;#34;&lt;/span>
&lt;span class="nf">C&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">C&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">mu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Lock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="k">defer&lt;/span> &lt;span class="nx">mu&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Unlock&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">chain&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">chain&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; --&amp;gt; C&amp;#34;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A can't compile
B output main --&amp;gt; A --&amp;gt; B --&amp;gt; C
C output main
D the program exits because of panic
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="11">
&lt;li>【2分】对线性表进行折半查找时，要求线性表必须___ ___。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 以顺序方式存储
B 以链接方式存储
C 以顺序方式存储，且元素按关键字有序排序
D 以链接方式存储，且元素按关键字有序排序
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="12">
&lt;li>【2分】关于内存分配说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 分页与分段都能达到地址隔离的效果
B 硬件中的TLB，帮助操作系统快速从虚拟地址定位到物理地址
C 如果TLB无法命中，则CPU或者操作系统会遍历分页表
D 操作系统运行时，程序获取的变量的内存地址是真实的物理地址
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="13">
&lt;li>【2分】关于 inode 以下说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A inode的数量是有限的
B inode信息中有一项叫做&amp;quot;链接数&amp;quot;，软链接会修改链接数
C 不同名称的文件有可能对应相同的inode
D 如果inode被使用完，则会导致无法创建文件
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="14">
&lt;li>【2分】关于 Linux 的进程调度算法，相关说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 目前使用的调度算法只依靠优先级进行调度的
B 目前使用的调度算法可以保证IO密集型进程优先得到CPU资源
C 目前使用的调度算法在选择最优进程时时间复杂度为O(logN)
D 目前使用的调度方式拥有多个优先级列表
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="15">
&lt;li>【2分】关于进程间通讯说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 匿名管道只能用于父子进程间单向通讯
B 命名管道实际是创建了一个管道文件
C 信号量只能用于父子进程间通讯与同步
D socket通讯可以跨主机通讯
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="16">
&lt;li>【2分】关于 linux 中进程状态叙述错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 处于D（TASK_UNINTERRUPTIBLE）状态的进程在状态改变前不能接受任何信号，也无法被强制退出
B 处于Z（EXIT_ZOMBIE）状态的进程产生的原因是因为其父进程未收集其退出状态
C 处于R（TASK_RUNNING）状态的进程不可能处于就绪状态
D 处于S（TASK_INTERRUPTIBLE）状态的进程可能是正在等待IO事件
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="17">
&lt;li>【2分】活锁与死锁类似，都是资源匮乏导致的，产生的原因是进程彼此释放资源又同时占用对方释放的资源，以下相关说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 死锁产生的必要条件仍然是活锁的产生的必要条件
B 处于活锁的多个进程处于非阻塞状态
C 消除死锁与活锁都可以通过杀掉进程来解决
D 活锁产生的必要条件不包括循环等待
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="18">
&lt;li>【2分】linux 中如果希望让内核跟踪数据包在iptables内的处理过程，可以在哪个表中加入相关规则&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A raw
B nat
C filter
D mangle
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="19">
&lt;li>【2分】 关于map，下面说法正确的是（）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A map反序列化时json.unmarshal的入参必须为map的地址
B 在函数调用中传递map，则子函数中对map元素的增加不会导致父函数中map的修改
C 在函数调用中传递map，则子函数中对map元素的修改不会导致父函数中map的修改
D 不能使用内置函数delete删除map的元素
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="20">
&lt;li>【2分】某文件的权限为-rw-r--r-x, 其对应权限用数值形式表示为&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 0775
B 0745
C 0645
D 0643
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="21">
&lt;li>【2分】下面这段代码输出什么？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="nx">a&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">b&lt;/span> &lt;span class="kt">int64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="nx">c&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">d&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">int64&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A true true false true false
B true false false true false
C true true true false false
D true true false true true
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="22">
&lt;li>【2分】 对任意实数c，从有N个无序元素的数组中寻找元素a、b，使得 a+b 的结果最接近c，最快的平均时间复杂度是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A O(N^2)
B O(log N)
C O(N)
D O(N^3)
E O(NLogN)
F 不确定
&lt;/code>&lt;/pre>&lt;p>正确答案：E&lt;/p>
&lt;h4 id="参考答案">参考答案：&lt;/h4>
&lt;p>2sum问题，稍微改了改让google直接搜不到&lt;/p>
&lt;ol start="23">
&lt;li>【2分】 请问以下哪个协议使用UDP作为网络层传输？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A HTTP
B Telnet
C DNS
D SMTP
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="24">
&lt;li>【2分】 &lt;code>top&lt;/code>命令中，哪个字段表示进程所占用的常驻内存使用量？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A VIRT
B RES
C SWAP
D DATA
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="25">
&lt;li>【2分】 用户数据包 UDP 的首部字段有 16 个字节，这种说法正确吗？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 正确
B 不正确
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="26">
&lt;li>【2分】 在使用&lt;code>ping&lt;/code> 命令时使用什么参数可以指定网卡或IP？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A -i
B -I
C -d
D -D
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="27">
&lt;li>【2分】 默认情况下，&lt;code>ping&lt;/code>命令每一次发出的icmp包大小为多少？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 32
B 56
C 64
D 72
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="28">
&lt;li>【2分】 在分层中继系统中，数据链路层接收或发送信息的基本单位是（）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 比特
B 字节
C 帧
D 数据报
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="29">
&lt;li>【2分】epoll底层的工作机制属于以下哪种io模型：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A asynchronous I/O
B I/O multiplexing
C signal driven I/O
D nonblocking I/O
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="30">
&lt;li>【2分】 当掩码位为/27时，子网中一共有多少个可用IP？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 30
B 64
C 32
D 62
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;h4 id="参考答案-1">参考答案：&lt;/h4>
&lt;p>网络号和广播地址不能算在内&lt;/p>
&lt;ol start="31">
&lt;li>【2分】 在 TCP/IP 体系结构中的 TCP 和 IP 所提供的服务分别为（）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 链路层服务和网络层服务
B 网络层服务和传输层服务
C 传输层服务和应用层服务
D 传输层服务和网络层服务
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="32">
&lt;li>【2分】以下哪种加密方式属于非对称加密：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 3DES
B AES
C RSA256
D SHA256
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="33">
&lt;li>【2分】以下这段代码的输出是？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;x =&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">8&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a =&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">n&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a =&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A x = 0, x = 8, a = [0 8], a = [1 9]
B x = 0, x = 0, a = [0 8], a = [0 8]
C x = 0, x = 0, a = [0 8], a = [1 9]
D x = 0, x = 8, a = [0 8], a = [0 8]
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="34">
&lt;li>【2分】现假设A进程与B进程建立了tcp连接。A进程发起了中断连接的动作（发送FIN报文），但B进程接收FIN报文后由于代码错误只发送了ACK报文即结束进程。假设此ACK报文被A进程接收。那么tcp连接的A端和B端分别处于什么状态：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A FIN-WAIT-1, CLOSE-WAIT
B FIN-WAIT-2, TIME-WAIT
C FIN-WAIT-1, TIME-WAIT
D FIN-WAIT-2, CLOSE-WAIT
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="35">
&lt;li>【2分】 mkdir 命令中，添加什么参数，使得在父目录不存在时，先创建父目录？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A -m
B -f
C -d
D -p
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="36">
&lt;li>【2分】 linux发起socket读写操作时，线程状态转换将如何转换：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 运行-&amp;gt;就绪
B 运行-&amp;gt;阻塞
C 就绪-&amp;gt;阻塞
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="37">
&lt;li>【2分】 如何将 &lt;code>test&lt;/code> 文件打包并使用gzip压缩？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A tar -zcvf test test.tar.gz
B tar -zcvf test.tar.gz test
C tar -jcvf test.tar.gz test
D tar -jcvf test test.tar.gz
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;h4 id="参考答案-2">参考答案：&lt;/h4>
&lt;p>Linux tar命令使用&lt;/p>
&lt;ol start="38">
&lt;li>【2分】下面这段程序的输出是：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">Foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">os&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PathError&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">err&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">Foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A nil, false
B &amp;quot;&amp;quot;, true
C nil, true
D nil, runtime error
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;h4 id="参考答案-3">参考答案：&lt;/h4>
&lt;p>在Golang中，interface的动态类型和值都为空时才为nil&lt;/p>
&lt;ol start="39">
&lt;li>【2分】 如何根据&lt;code>free&lt;/code>命令的输出，得知目前实际可用内存？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A free列数据
B free列数据 - buffers列数据 + cached列数据
C free列数据 + buffers列数据 + cached列数据
D free列数据 + buffers列数据 - cached列数据
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="40">
&lt;li>【2分】 ctrl + c 会给前台进程组中的进程发送什么信号？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A SIGINT
B SIGTSTP
C SIGQUIT
D SIGTERM
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;h4 id="参考答案-4">参考答案：&lt;/h4>
&lt;p>Linux信号机制&lt;/p>
&lt;ol start="41">
&lt;li>【2分】通道，运行下面这段代码输出什么？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">ch&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ch&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">count&lt;/span>&lt;span class="o">++&lt;/span>
&lt;span class="nb">close&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}()&lt;/span>
&lt;span class="o">&amp;lt;-&lt;/span>&lt;span class="nx">ch&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;pre>&lt;code>A can't compile
B output 1
C output 0
D the program exits because of panic
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="42">
&lt;li>【2分】 ctrl + z 会给前台进程组中的进程发送什么信号？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A SIGINT
B SIGTSTP
C SIGQUIT
D SIGTERM
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;h4 id="参考答案-5">参考答案：&lt;/h4>
&lt;p>Linux信号机制&lt;/p>
&lt;ol start="43">
&lt;li>【2分】 ctrl + / 会给前台进程组中的进程发送什么信号？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A SIGINT
B SIGTSTP
C SIGQUIT
D SIGTERM
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;h4 id="参考答案-6">参考答案：&lt;/h4>
&lt;p>Linux信号机制&lt;/p>
&lt;ol start="44">
&lt;li>【2分】 以下哪个应用(Application)需要用到ICMP协议？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A ftp
B traceroute
C tcpdump
D netstat
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="45">
&lt;li>【2分】读写锁，运行下面这段代码输出什么？
package main&lt;/li>
&lt;/ol>
&lt;p>import (
&amp;quot;fmt&amp;quot;
&amp;quot;sync&amp;quot;
&amp;quot;time&amp;quot;
)&lt;/p>
&lt;p>var mu sync.RWMutex
var count int&lt;/p>
&lt;p>func main() {
go A()
time.Sleep(2 * time.Second)
mu.Lock()
defer mu.Unlock()
count++
fmt.Println(count)
}&lt;/p>
&lt;p>func A() {
mu.RLock()
defer mu.RUnlock()
B()
}&lt;/p>
&lt;p>func B() {
time.Sleep(5 * time.Second)
C()
}&lt;/p>
&lt;p>func C() {
mu.RLock()
defer mu.RUnlock()
}&lt;/p>
&lt;pre>&lt;code>Acan't compile
Boutput 1
Cthe program is hung
Dthe program exits because of panic
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="46">
&lt;li>【2分】 下述协议中，不建立于IP协议之上的协议是_____。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AARP
BICMP
CSNMP
DTCP
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="47">
&lt;li>【2分】 在MySql中，如果要修改表的列名，下列语句的语法正确的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AALTER TABLE 表名字 CHANGE 列名称 新列名称
BALTER TABLE 表名字 ALTER 列名称 新列名称
CALTER TABLE 表名字 MODIFY 列名称 新列名称
DALTER TABLE 表名字 列名称 新列名称
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="48">
&lt;li>【2分】 以下关于堆的叙述中正确的是（）Ⅰ.在一个大根堆中，最小关键字的记录一定属于最底层的叶子结点层Ⅱ.在一个小根堆中，从根结点到某个叶子结点所经路径上的结点构成一个递增有序序列Ⅲ.堆一定是一棵完全二叉树Ⅳ.由某关键字序列构造的一棵完全二叉树经过一次筛选便可以变成一个堆&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A仅Ⅰ、Ⅲ
B仅Ⅱ、Ⅲ
C仅Ⅱ、Ⅲ、Ⅳ
D仅Ⅰ、Ⅱ、Ⅲ
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="49">
&lt;li>【2分】以下情况对性能影响由大到小排列，最接近的选项是？
A.分支预测失败 B.L1 Cache 失效
C.IO等待 D.虚拟内存page miss&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AA &amp;gt; B &amp;gt; C &amp;gt; D
BC &amp;gt; B &amp;gt; D &amp;gt; A
CD &amp;gt; A &amp;gt; C &amp;gt; B
DD &amp;gt; B &amp;gt; C &amp;gt; A
EA &amp;gt; C &amp;gt; D &amp;gt; B
FB &amp;gt; D &amp;gt; A &amp;gt; C
GC &amp;gt; D &amp;gt; B &amp;gt; A
&lt;/code>&lt;/pre>&lt;p>正确答案：G&lt;/p>
&lt;ol start="50">
&lt;li>【2分】 在使用Nmap对目标网络进行扫描时发现，某一个主机开放了25 SMTP和110 POP3端口，此主机最有可能是什么？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A文件服务器
B邮件服务器
CWEB服务器
DDNS服务器
&lt;/code>&lt;/pre>&lt;p>正确答案：B. 【2分】 能用二分法进行查找的是（）&lt;/p>
&lt;pre>&lt;code>A顺序存储的有序线性表
B线性链表
C二叉链表
D有序线性链表
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="52">
&lt;li>【2分】 浏览器访问某页面，HTTP 协议返回状态码为 401 时表示&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A找不到该页面
B未授权
C禁止访问
D服务器繁忙
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="53">
&lt;li>【2分】 顺序表含有127个元素,向其插入一个新元素并保持原来顺序不变,平均要移动____个元素()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A63.5
B8
C32
D7
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="54">
&lt;li>【2分】 Mysql中，下列哪个是对某个IP段开放使用User用户访问数据库的权限的正确操作？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AGRANT ALL PRIVILEGES ON database.* TO 'user'@'192.168.100.1/255.255.255.240';
BGRANT ALL PRIVILEGES ON database.* TO 'user'@'192.168.100.1/28';
CGRANT ALL PRIVILEGES ON database.* TO 'user'@'192.168.100.1~14';
DGRANT ALL PRIVILEGES ON database.* TO 'user'@'192.168.100.1,192.168.100.2,192.168.100.3,192.168.100.4,192.168.100.5,192.168.100.6,192.168.100.7,192.168.100.8,192.168.100.9,192.168.100.10,192.168.100.11,192.168.100.12,192.168.100.13,192.168.100.14';
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="55">
&lt;li>【2分】 有两个从小到大排好序的数组，长度分别为N和M，将这两个数组合并成一个有序数组的最小比较次数是？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AMin(N, M)
BM + N -1
CN + M
DMax(N, M)
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="56">
&lt;li>【2分】 以下关于VPN说法正确的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AVPN指的是用户自己租用线路，和公共网络物理上完全隔离的、安全的线路
BVPN指的是用户通过公用网络建立的临时的、安全的连接
CVPN不能做到信息认证和身份认证
DVPN只能提供身份认证、不能提供加密数据的功能
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="57">
&lt;li>【2分】 epoll底层的工作机制属于以下哪种io模型：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Aasynchronous I/O
BI/O multiplexing
Csignal driven I/O
Dnonblocking I/O
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="58">
&lt;li>【2分】 数据库事务的特性不包括以下哪一项？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A原子性
B分区容错性
C一致性
D隔离性
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="59">
&lt;li>【2分】 以下哪种加密方式属于非对称加密：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A3DES
BAES
CRSA256
DSHA256
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="60">
&lt;li>【2分】 下列有关MySQL数据库中的NULL值,说法正确的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ANULL与它本身的比较可以使用=,&amp;lt;&amp;gt;或!=
BNULL是&amp;quot;有数据的&amp;quot;
CNULL与0的比较可以使用=,&amp;lt;&amp;gt;或!=
DNULL是&amp;quot;无数据&amp;quot;或&amp;quot;未知数据&amp;quot;
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="61">
&lt;li>【2分】 现假设A进程与B进程建立了tcp连接。A进程发起了中断连接的动作（发送FIN报文），但B进程接收FIN报文后，只发送了ACK报文并被A进程接收。那么tcp连接的A端和B端分别处于什么状态：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AFIN-WAIT-1, CLOSE-WAIT
BFIN-WAIT-2, TIME-WAIT
CFIN-WAIT-1, TIME-WAIT
DFIN-WAIT-2, CLOSE-WAIT
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="62">
&lt;li>【2分】 以下关于NAT地址类型中的描述，错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A复用地址转换是一种特殊的静态地址转换
B动态地址转换是从内部合法地址池中动态地选择一个未使用的地址对内部本地地址进行转换
C端口地址转换使多个内部节点共享一个全局IP地址，而使用源和目的的TCP/UDP的端口号来区分NAT表中的转换条目及内部
D静态NAT将内部地址一对一静态映射到内部全局地址
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="63">
&lt;li>【2分】 linux发起socket读写操作时，线程状态转换将如何转换：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A运行-&amp;gt;就绪
B运行-&amp;gt;阻塞
C就绪-&amp;gt;阻塞
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="64">
&lt;li>【2分】 以下关于TCP/IP协议的叙述中，说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AICMP协议用于控制数据报传送中的差错情况
BRIP协议根据交换的路由信息动态生成路由表
CFTP协议在客户服务器之间建立起两条连接
DRARP协议根据IP地址查询对应的MAC地址
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="65">
&lt;li>【2分】 一台主机要实现通过局域网与另一个局域网通信，需要做的工作是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A配置域名服务器
B定义一条本机指向所在网络的路由
C定义一条本机指向所在网络网关的路由
D定义一条本机指向目标网络网关的路由
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="66">
&lt;li>【2分】 当同一网段中两台工作站配置了相同的IP 地址时，会导致&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A先入者被后入者挤出网络而不能使用
B双方都会得到警告，但先入者继续工作，而后入者不能
C双方可以同时正常工作，进行数据的传输
D双主都不能工作，都得到网址冲突的警告
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="67">
&lt;li>【2分】 在区间[-2, 2]里任取两个实数，它们的和&amp;gt;1的概率是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A3/8
B3/16
C9/32
D9/64
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;h4 id="参考答案-7">参考答案：&lt;/h4>
&lt;p>作图可解&lt;/p>
&lt;ol start="68">
&lt;li>【2分】 下列关于程序优化的说法正确的是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A在任何场景下面，实现同样逻辑的JIT代码都比native代码运行的速度慢；
B循环展开得越多越彻底，程序的性能越好；
C寄存器分配能够解决程序中的数据依赖问题；
D现代主流C/C++编译器可以对简单的小函数进行自动inline
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;h4 id="参考答案-8">参考答案：&lt;/h4>
&lt;p>JIT在某些场景可以缓存中间结果，不一定比native慢；循环过度展开可能引起cache miss；&lt;/p>
&lt;ol start="69">
&lt;li>【2分】 如果 22, 24, 26, 14, 16, 18, 46, 8, 10 是第二次排序后的结果，以下哪种排序算法可以满足？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A冒泡排序
B插入排序
C选择排序
D快速排序
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="70">
&lt;li>【2分】 如果把传输速率定义为单位时间内传送的信息量(以字节计算)多少。关于一下几种典型的数据传输速率：(1)使用USB3.0闪存盘，往USB闪存盘上拷贝文件的数据传输速率(2)使用100M以太网，在局域网内拷贝大文件时网络上的数据传输速率(3)使用一辆卡车拉1000块单块1TB装满数据的硬盘，以100km/h的速度从上海到天津(100km)一趟所等价的数据传输宽带(4)使用电脑播放MP3，电脑的pci总线到声卡的数据传输速率在通常情况下，关于这几个传输速率的排序正确的是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A4&amp;lt;2&amp;lt;1&amp;lt;3
B1&amp;lt;4&amp;lt;2&amp;lt;3
C4&amp;lt;1&amp;lt;3&amp;lt;2
D1&amp;lt;4&amp;lt;3&amp;lt;2
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="71">
&lt;li>【2分】 一个人上楼梯有两种走法：一次上一级和一次上两级，那么走上一个有11级的楼梯有多少种走法：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A110;
B89;
C140;
D144;
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;h4 id="参考答案-9">参考答案：&lt;/h4>
&lt;p>斐波那契数列，F(0) = F(1) = 1, F(11) = 144&lt;/p>
&lt;ol start="72">
&lt;li>【2分】 在一棵度为4的树T中，若有20个度为4的结点，10个度为3的结点，1个度为2的结点，10个度为1的结点，则树T的叶结点个数是。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A41
B82
C113
D122
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;h4 id="参考答案-10">参考答案：&lt;/h4>
&lt;p>除根节点外，每个节点都有一个入度，总入度为20 * 4 + 10 * 3 + 1 * 2 + 10 * 1 = 122，所以总节点数为123，叶子节点为123 - 20 - 10 - 1 - 10 = 82&lt;/p>
&lt;ol start="73">
&lt;li>【2分】 设栈S和队列Q的初始状态均为空，元素a,b,c,d,e,f,g 依次进入栈S。若每个元素出栈后立即进入队列Q，且7个元素出队的顺序是b,d,c,f,e,a,g，则栈S的容量至少是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A1
B2
C3
D4
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;h4 id="参考答案-11">参考答案：&lt;/h4>
&lt;p>略&lt;/p>
&lt;ol start="74">
&lt;li>【2分】 设一棵二叉树中有3个叶子结点，有8个度为1的结点，则该二叉树中总的结点数为 ()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A12
B13
C14
D15
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="75">
&lt;li>【2分】 给定下列归并排序代码:int *tmp = new int[10000];void MergeSort(int *ptr, int size) {if (size &amp;lt;= 1) {return;}auto half_size = size / 2;MergeSort(ptr, half_size);MergeSort(ptr + half_size, size - half_size); // 断点Merge(ptr, size, tmp);}int main() {int ary[] = { 2, 1, 3, 4, 7, 6, 5 };MergeSort(ary, 7);return 0;}假设注释所在的行被加了一个断点，当这个断点第3次被hit到时，ary的元素顺序依次是:&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A2 1 3 4 5 6 7;
B2 1 3 4 6 7 5;
C1 2 3 4 7 6 5;
D1 2 3 4 5 6 7;
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;h4 id="参考答案-12">参考答案：&lt;/h4>
&lt;p>略&lt;/p>
&lt;ol start="76">
&lt;li>【2分】 HTTP/3 (Hypertext Transfer Protocol (HTTP) over QUIC) 是基于什么传输层的协议的？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ATCP
BUDP
CICMP
DIP
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="77">
&lt;li>【2分】 具有3个结点的二叉树有()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A2种形态
B4种形态
C7种形态
D5种形态
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="78">
&lt;li>【2分】如果下面源码被编译成32位程序（g++ -o test -m32 ./test.cpp），程序的输出是多少:includeusing namespace std;struct Foo {
char c;
int x;
short y;
};int main() {
cout &amp;lt;&amp;lt; sizeof(Foo) &amp;lt;&amp;lt; endl;
return 0;
}&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A7;
B12;
C8;
D都不对；
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;h4 id="参考答案-13">参考答案：&lt;/h4>
&lt;p>考虑地址对齐&lt;/p>
&lt;ol start="79">
&lt;li>【2分】 栈底至栈顶依次存放元素A、B、C、D，在第五个元素E入栈前，栈中元素可以出栈，则出栈序列可能是()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AABCED
BDBCEA
CCDABE
DDCBEA
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="80">
&lt;li>【2分】 下列代码中三个变量x, y, z的内存位置分别是:int &lt;iostream>using namespace std;static int x = 0;void add(int e) { int y = 2 * e; x += y; }int main() {add(1);int *z = &amp;amp;x;cout &amp;lt;&amp;lt; *z &amp;lt;&amp;lt; endl;return 0;}&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A数据段，栈，堆；
B栈，数据段，堆；
CBSS段，栈，栈；
D数据段，栈，栈;
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;h4 id="参考答案-14">参考答案：&lt;/h4>
&lt;p>x是被初始化的全局变量位于数据段，y位于栈中，z是指针变量，也位于栈中；&lt;/p>
&lt;ol start="81">
&lt;li>【2分】 已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Acedba
Bacbed
Cdecab
Ddeabc
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="82">
&lt;li>【2分】 下列命中组合情况中，一次访存过程中不．可能发生的是。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ATLB 未命中，Cache 未命中，Page 未命中
BTLB 未命中，Cache 命中，Page 命中
CTLB 命中，Cache 未命中，Page 命中
DTLB 命中，Cache 命中，Page 未命中
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;h4 id="参考答案-15">参考答案：&lt;/h4>
&lt;p>TLB为页表缓冲，不可能发生page为命中，但是TLB命中的情况&lt;/p>
&lt;ol start="83">
&lt;li>【2分】 相同session的数据包(packet)在以下哪个或哪些协议中有可能通过不同的路由路径传输？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ATCP, but not UDP
BTCP and UDP
CUDP, but not TCP
DNeither TCP nor UDP
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="84">
&lt;li>【2分】 以下数据结构中不属于线性数据结构的是()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A队列
B线性表
C二叉树
D栈
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="85">
&lt;li>【2分】 在一棵二叉树上第5层的结点数最多是()&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A8
B16
C32
D15
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="86">
&lt;li>【2分】 有一个算法的递推关系式为：T(N) = T(2N/3) + 1，则该算法的时间复杂度为（）(^符号是幂的意思)&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AO(1)
BO(N^log2(3) )
CO(N^log3(2) )
DO(logN)
EO(N)
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="87">
&lt;li>【2分】 命题p→q与下面哪个命题等价&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A~p∧q
Bp∧q
C~p∨q
Dp∨q
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="88">
&lt;li>【2分】关于 HTTP 协议说法中错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AHTTP协议是无状态协议
BHTTP/1.0中已经支持KeepAlive
CHTTP/2协议支持多路复用与首部压缩
DHTTP/3将会使用UDP来传输数据
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="89">
&lt;li>【2分】关于路由跟踪错误的是（请考虑任意平台中任意可用于做路由跟踪的软件）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ATCP与UDP协议也可用来做路由跟踪
B如果使用ICMP协议做路由跟踪，需要指定目目标端口
Clinux下做路由跟踪的软件包括traceroute和mtr
D如果使用TCP协议做路由跟踪，目标主机不一定能有回应
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="90">
&lt;li>【2分】关于 TCP 连接中拥塞控制中，正确的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A拥塞窗口的大小，在首次出现丢包时一直是指数增长
B 快重传输算法中，如果发送方收到三个重复确认就应当立即重传对方尚未收到的报文段
C快重传算法触发后，快恢复不一定触发
D快重传算法触发后，慢启动阈值根据原慢启动阈值进行改变
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;h2 id="问答题">问答题&lt;/h2>
&lt;p>1&lt;/p>
&lt;p>【6分】在go语言中，数组与切片的区别？&lt;/p>
&lt;h2 id="参考答案-16">参考答案：&lt;/h2>
&lt;p>(1). 数组 数组是具有固定长度且拥有零个或者多个相同数据类型元素的序列。 数组的长度是数组类型的一部分，所以[3]int 和 [4]int 是两种不同的数组类型。
数组需要指定大小，不指定也会根据初始化的自动推算出大小，不可改变 ;
数组是值传递;
数组是内置(build-in)类型,是一组同类型数据的集合，它是值类型，通过从0开始的下标索引访问元素值。在初始化后长度是固定的，无法修改其长度。当作为方法的参数传入时将复制一份数组而不是引用同一指针。数组的长度也是其类型的一部分，通过内置函数len(array)获取其长度。
数组定义：
var array [10]int&lt;/p>
&lt;p>var array = [5]int{1,2,3,4,5}&lt;/p>
&lt;p>(2). 切片 切片表示一个拥有相同类型元素的可变长度的序列。 切片是一种轻量级的数据结构，它有三个属性：指针、长度和容量。
切片不需要指定大小;
切片是地址传递;
切片可以通过数组来初始化，也可以通过内置函数make()初始化 .初始化时len=cap,在追加元素时如果容量cap不足时将按len的2倍扩容；
切片定义：
var slice []type = make([]type, len)&lt;/p>
&lt;p>2&lt;/p>
&lt;p>【6分】Go程序资源初始化顺序？&lt;/p>
&lt;h2 id="参考答案-17">参考答案：&lt;/h2>
&lt;p>一个程序中所涉及到的所有的在运行时刻要用到的代码包的加载是串行执行的。 在一个程序启动时，每个包中总是在它所有依赖的包都加载完成之后才开始加载。 程序代码包总是最后一个被加载的代码包。每个被用到的包会被而且仅会被加载一次。
在加载一个代码包的过程中，所有的声明在此包中的init函数将被串行调用并且仅调用执行一次。 一个代码包中声明的init函数的调用肯定晚于此代码包所依赖的代码包中声明的init函数。 所有的init函数都将在调用main入口函数之前被调用执行。
在同一个源文件中声明的init函数将按从上到下的顺序被调用执行。 对于声明在同一个包中的两个不同源文件中的两个init函数，Go语言白皮书推荐（但不强求）按照它们所处于的源文件的名称的词典序列（对英文来说，即字母顺序）来调用。 所以最好不要让声明在同一个包中的两个不同源文件中的两个init函数存在依赖关系。
在加载一个代码包的时候，此代码包中声明的所有包级变量都将在此包中的任何一个init函数执行之前初始化完毕。
在同一个包内，包级变量将尽量按照它们在代码中的出现顺序被初始化，但是一个包级变量的初始化肯定晚于它所依赖的其它包级变量。&lt;/p>
&lt;p>3&lt;/p>
&lt;p>【6分】在Go语言中，函数调用time.Sleep(d)和通道接收&amp;lt;-time.After(d)操作之间有何区别？&lt;/p>
&lt;h2 id="参考答案-18">参考答案：&lt;/h2>
&lt;p>两者都会将当前的goroutine执行暂停一段时间。 区别在于time.Sleep(d)函数调用将使当前的协程进入睡眠字状态，但是当前协程的（主）状态依然为运行状态； 而通道接收&amp;lt;-time.After(d)操作将使当前协程进入阻塞状态。&lt;/p>
&lt;p>4&lt;/p>
&lt;p>【6分】Go语言中除了使用+运算符来衔接字符串，我们还可以用哪些方法来衔接字符串？&lt;/p>
&lt;h2 id="参考答案-19">参考答案：&lt;/h2>
&lt;ul>
&lt;li>fmt标准库包中的Sprintf/Sprint/Sprintln函数可以用来衔接各种类型的值的字符串表示，当然也包括字符串类型的值。&lt;/li>
&lt;li>使用strings标准库包中的Join函数。&lt;/li>
&lt;li>bytes标准库包提供的Buffer类型可以用来构建一个字节切片，然后我们可以将此字节切片转换为一个字符串。&lt;/li>
&lt;li>strings标准库包中的Builder类型可以用来拼接字符串。 和bytes.Buffer类型类似，此类型内部也维护着一个字节切片，但是它在将此字节切片转换为字符串时避免了底层字节的深复制。&lt;/li>
&lt;/ul>
&lt;p>5&lt;/p>
&lt;p>【6分】运行下面这段代码输出什么？
package main&lt;/p>
&lt;p>import (
&amp;quot;fmt&amp;quot;
)&lt;/p>
&lt;p>func main() {
slice := []int{0, 1, 2, 3}
m := make(map[int]*int)&lt;/p>
&lt;p>for key, val := range slice {
m[key] = &amp;amp;val
}&lt;/p>
&lt;p>for k, v := range m {
fmt.Printf(&amp;quot;key: %d, value: %d \n&amp;quot;, k, *v)
}
}&lt;/p>
&lt;h2 id="参考答案-20">参考答案：&lt;/h2>
&lt;p>key: 0, value: 3
key: 1, value: 3
key: 2, value: 3
key: 3, value: 3&lt;/p>
&lt;p>解析:
for range 循环的时候会创建每个元素的副本，而不是元素的引用，
所以 m [key] = &amp;amp;val 取的都是变量 val 的地址，所以最后 map 中的所有元素的值都是变量 val 的地址，
因为最后 val 被赋值为 3，所有输出都是 3.&lt;/p>
&lt;p>6&lt;/p>
&lt;p>【6分】在go语言中，new和make的区别？&lt;/p>
&lt;h2 id="参考答案-21">参考答案：&lt;/h2>
&lt;p>new 的作用是初始化一个指向类型的指针(*T)
new函数是内建函数，函数定义：func new(Type) *Type
使用new函数来分配空间。传递给new 函数的是一个类型，不是一个值。返回值是 指向这个新分配的零值的指针。
make 的作用是为 slice，map 或 chan 初始化并返回引用(T)。&lt;/p>
&lt;p>make函数是内建函数，函数定义：func make(Type, size IntegerType) Type
· 第一个参数是一个类型，第二个参数是长度
· 返回值是一个类型
make(T, args)函数的目的与new(T)不同。它仅仅用于创建 Slice, Map 和 Channel，并且返回类型是 T（不是T*）的一个初始化的（不是零值）的实例。&lt;/p>
&lt;p>7&lt;/p>
&lt;p>【6分】缓存在计算机系统中广泛使用，请设计一个缓存系统，满足如下要求：基于k-v形式存储和访问数据且时间复杂度满足O(1)，在并发情况下保证数据同步。工程实现中，需要考虑在系统内存大小约束下的数据淘汰规则，通常基于LRU等规则进行数据淘汰。请在上述实现的基础上，增加基于LRU的数据淘汰规则，使得系统中最多保存最近被访问的N条数据。&lt;/p>
&lt;p>8&lt;/p>
&lt;p>【6分】以下这段代码是否存在问题？如有请纠正，并指出问题如没有，则程序的输出是？
&lt;code>func main() { var wg sync.WaitGroup wg.Add(5) for i := 0; i &amp;lt; 5; i++ { go func() { fmt.Print(i) wg.Done() }() } wg.Wait() fmt.Println() }&lt;/code>&lt;/p>
&lt;p>9&lt;/p>
&lt;p>【6分】Go语言中哪些表达式的估值结果可以包含一个额外的可选的值？&lt;/p>
&lt;h2 id="参考答案-22">参考答案：&lt;/h2>
&lt;p>&lt;img src="https://uploadfiles.nowcoder.com/images/20210122/343665_1611304896822/5211460144610C544539C1F8356DEAE4" alt="img">&lt;/p>
&lt;p>10&lt;/p>
&lt;p>【6分】简述一下golang的MPG调度模型?&lt;/p>
&lt;h2 id="参考答案-23">参考答案：&lt;/h2>
&lt;p>M(machine): 关联了一个内核线程。
P(processor): 代表了M所需的上下文环境,也是处理用户级代码逻辑的处理器。&lt;/p>
&lt;p>G(goroutine): 调度系统的最基本单位goroutine,存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等。&lt;/p>
&lt;p>M关联了一个内核线程，通过调度器P（上下文）的调度，可以连接1个或者多个G,相当于把一个内核线程切分成了了N个用户线程；&lt;/p>
&lt;p>M和P是一对一关系（但是实际调度中关系多变），通过P调度N个G（P和G是一对多关系），实现内核线程和G的多对多关系（M:N），通过这个方式，一个内核线程就可以起N个Goroutine，同样硬件配置的机器可用的用户线程就成几何级增长，并发性大幅提高。&lt;/p>
&lt;p>11&lt;/p>
&lt;p>【6分】Go语言中哪些种类型的值可以用做内置len（以及cap、close、delete和make）函数调用的实参？&lt;/p>
&lt;h2 id="参考答案-24">参考答案：&lt;/h2>
&lt;p>&lt;img src="https://uploadfiles.nowcoder.com/images/20210122/343665_1611304825409/8107AEB4CF7F606EE873B1A51E7FEADE" alt="img">&lt;/p>
&lt;p>12&lt;/p>
&lt;p>【6分】 Go语言中运行时错误信息all goroutines are asleep - deadlock意味着什么?&lt;/p>
&lt;h2 id="参考答案-25">参考答案：&lt;/h2>
&lt;p>用词asleep在这里其实并不准确，实际上它的意思是处于阻塞状态。&lt;/p>
&lt;p>因为一个处于阻塞状态的协程只能被另一个协程解除阻塞，如果程序中所有的协程都进入了阻塞状态，则它们将永远都处于阻塞状态。 这意味着程序死锁了。&lt;/p>
&lt;p>一个正常运行的程序永远不应该死锁，一个死锁的程序肯定是由于逻辑实现上的bug造成的。 因此官方Go标准运行时将在一个程序死锁时令其崩溃退出。&lt;/p>
&lt;p>13&lt;/p>
&lt;p>【6分】 假设某信息流推荐引擎后台需要记录每一小时内访问某篇文章的不同用户数量，由于可能存在爆款文章，通过内存存储某一小时的用户id并进行去重计算可能导致oom。请设计一个合理的存储机制，保证访问数据存储的高效性和计算的可靠性。&lt;/p>
&lt;h2 id="编程题">编程题&lt;/h2>
&lt;p>完善核心代码 语言限制 【10分】 标题：合并二叉树 | 时间限制：1秒 | 内存限制：262144K已知两颗二叉树，将它们合并成一颗二叉树。合并规则是：都存在的结点，就将结点值加起来，否则空的位置就由另一个树的结点来代替。例如：
两颗二叉树是:
Tree 1&lt;br>
1&lt;br>
/ \&lt;br>
3 2
/ &lt;br>
5&lt;/p>
&lt;p>Tree 2
2
/&lt;br>
1 3
\ &lt;br>
4 7&lt;/p>
&lt;p>合并后的树为
3
/&lt;br>
4 5
/ \ &lt;br>
5 4 7&lt;/p>
&lt;p>示例1&lt;/p>
&lt;p>输入&lt;code>{1,3,2,5},{2,1,3,#,4,#,7}&lt;/code>输出&lt;code>{3,4,5,5,4,#,7} &lt;/code>&lt;/p>
&lt;p>2&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：需要排序的最短子数组长度 | 时间限制：2秒 | 内存限制：262144K给定一个无序数组arr，求出需要排序的最短子数组的长度，对子数组排序后能使得整个数组有序，即为需要排序的数组。例如：arr=[1,5,3,4,2,6,7]返回4，因为只有[5,3,4,2]需要排序。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[1,5,3,4,2,6,7]&lt;code>输出&lt;/code>4 `&lt;/p>
&lt;p>3&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：&amp;quot;之&amp;quot;字形打印矩阵 | 时间限制：2秒 | 内存限制：262144K给定一个矩阵matrix，按照“之”字形的方式打印这个矩阵，如样例所示。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%2Cm%20%5Cleq%20200" alt="img">&lt;code>示例1输入&lt;/code>[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]&lt;code>输出&lt;/code>[1,2,5,9,6,3,4,7,10,13,14,11,8,12,15,16] `&lt;/p>
&lt;p>4&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：将正方形矩阵顺时针旋转90度 | 时间限制：2秒 | 内存限制：262144K给定一个n*n的矩阵matrix，请把这个矩阵顺时针转动90度。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20200" alt="img">&lt;code>示例1输入&lt;/code>[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]&lt;code>输出&lt;/code>[[13,9,5,1],[14,10,6,2],[15,11,7,3],[16,12,8,4]] `&lt;/p>
&lt;p>5&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在其它数出现次数都为偶数的数组中找到出现次数为奇数次的数 | 时间限制：2秒 | 内存限制：262144K给定一个数字arr，其中只有有两个数字出现了奇数次，其它数字都出现了偶数次，按照从小到大顺序输出这两个数。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[1,1,2,3]&lt;code>输出&lt;/code>[2,3] &lt;code>示例2输入&lt;/code>[11,22,11,23,23,45]&lt;code>输出&lt;/code>[22,45] `&lt;/p>
&lt;p>6&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在其它数出现次数都为偶数的数组中找到出现次数为奇数次的数 | 时间限制：2秒 | 内存限制：262144K给一个数组arr，其中只有一个数出现了奇数次，其它数出现了偶数次，打印这个数。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[3,1,3,1,2]&lt;code>输出&lt;/code>2 &lt;code>示例2输入&lt;/code>[6,6,3]&lt;code>输出&lt;/code>3 `&lt;/p>
&lt;p>7&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：整数的二进制数表达中有多少个1 | 时间限制：2秒 | 内存限制：262144K给定一个32位整数n，返回该整数二进制形式1的个数。示例1输入&lt;code>1&lt;/code>输出&lt;code>1 &lt;/code>示例2输入&lt;code>-2&lt;/code>输出&lt;code>31 &lt;/code>&lt;/p>
&lt;p>8&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：不用算术运算符实现整数的加减乘除运算 | 时间限制：2秒 | 内存限制：262144K给定两个32位整数a和b。要求不使用算术运算符，分别实现a和b的加减乘除运算。如果给定的a和b执行加减乘除的某些结果本来就会导致数据的溢出，那么你实现的函数不需要对那些结果负责（你的输出和加减乘除溢出的结果保持一致就行）。
运算符为“+”，“-”，“*”，&amp;quot;&amp;quot;中的一个。（数据保证不会出现除0的情况）
示例1输入&lt;code>2,*,4&lt;/code>输出&lt;code>8 &lt;/code>示例2输入&lt;code>5,\,4&lt;/code>输出&lt;code>1 &lt;/code>&lt;/p>
&lt;p>9&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：子数组的最大异或和 | 时间限制：2秒 | 内存限制：262144K数组异或和的定义：把数组中所有的数异或起来得到的值。给定一个整型数组arr，其中可能有正、有负，有零，求其中子数组的最大异或和。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[3,-28,-29,2]&lt;code>输出&lt;/code>7 &lt;code>说明&lt;/code>{-28，-29}这个子数组的异或和为7，是所有子数组中最大的`&lt;/p>
&lt;p>10&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：字典树的实现 | 时间限制：2秒 | 内存限制：262144K字典树又称为前缀树或者Trie树，是处理字符串常用的数据结构。假设组成所有单词的字符仅是‘a’～‘z’，请实现字典树的结构，并包含以下四个主要的功能。void insert(String word)：添加word，可重复添加；void delete(String word)：删除word，如果word添加过多次，仅删除一次；boolean search(String word)：查询word是否在字典树中出现过(完整的出现过，前缀式不算)；int prefixNumber(String pre)：返回以字符串pre作为前缀的单词数量。现在给定一个m，表示有m次操作，每次操作都为以上四种操作之一。每次操作会给定一个整数op和一个字符串word，op代表一个操作码，如果op为1，则代表添加word，op为2则代表删除word，op为3则代表查询word是否在字典树中，op为4代表返回以word为前缀的单词数量（数据保证不会删除不存在的word）。
对于每次操作，如果op为3时，如果word在字典树中，请输出“YES”，否则输出“NO”；如果op为4时，请输出返回以word为前缀的单词数量，其它情况不输出。
备注:&lt;img src="https://www.nowcoder.com/equation?tex=m%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=%7Cword%7C%20%5Cleq%2020" alt="img">&lt;code>示例1输入&lt;/code>[[&amp;quot;1&amp;quot;,&amp;quot;qwer&amp;quot;],[&amp;quot;1&amp;quot;,&amp;quot;qwe&amp;quot;],[&amp;quot;3&amp;quot;,&amp;quot;qwer&amp;quot;],[&amp;quot;4&amp;quot;,&amp;quot;q&amp;quot;],[&amp;quot;2&amp;quot;,&amp;quot;qwer&amp;quot;],[&amp;quot;3&amp;quot;,&amp;quot;qwer&amp;quot;],[&amp;quot;4&amp;quot;,&amp;quot;q&amp;quot;]]&lt;code>输出&lt;/code>[&amp;quot;YES&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;NO&amp;quot;,&amp;quot;1&amp;quot;] `&lt;/p>
&lt;p>11&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：表达式得到期望结果的组合种数 | 时间限制：2秒 | 内存限制：262144K给定一个只由0（假）、1（真）、&amp;amp;（逻辑与）、|（逻辑或）和^（异或）五种字符组成的字符串express，再给定一个布尔值desired。求出express能有多少种组合方式，可以达到desired的结果。并输出你所求出的总方案数对&lt;img src="https://uploadfiles.nowcoder.com/files/20190202/310695_1549118408372_equation?tex=10%5E%7B9%7D%2B7" alt="img">取模后的值。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cexpress%7C%20%20%5Cleq%20500" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;1^0|0|1&amp;quot;,false&lt;code>输出&lt;/code>2 &lt;code>说明&lt;/code>1^((0|0)|1)和1^(0|(0|1))可以得到false&lt;code>示例2输入&lt;/code>&amp;quot;1&amp;quot;,false&lt;code>输出&lt;/code>0 `&lt;/p>
&lt;p>12&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：数字字符转化为字母组合的种数 | 时间限制：2秒 | 内存限制：262144K给定一个字符串str，str全部由数字字符组成，如果str中的某一个或者相邻两个字符组成的子串值在1~26之间，则这个子串可以转换为一个字母。规定‘1’转换为“A”，“2”转换为“B”......&amp;quot;26&amp;quot;转化为“Z“。请求出str有多少种不同的转换结果，由于答案可能会比较大，所以请输出对&lt;img src="https://uploadfiles.nowcoder.com/files/20190202/310695_1549118408372_equation?tex=10%5E%7B9%7D%2B7" alt="img">取模后的答案。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr%7C%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;1111&amp;quot;&lt;code>输出&lt;/code>5 &lt;code>示例2输入&lt;/code>&amp;quot;01&amp;quot;&lt;code>输出&lt;/code>0 `&lt;/p>
&lt;p>13&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在数组中找到出现次数大于n/k的数 | 时间限制：2秒 | 内存限制：262144K给定一个整型数组arr，再给定一个整数k，按从小到大顺序打印所有出现次数大于n/k的数，如果没有这样的数,请打印”-1“。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20k%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3,1,2,3,4],7&lt;code>输出&lt;/code>[1,2,3] &lt;code>示例2输入&lt;/code>[1,1,2,3],1&lt;code>输出&lt;/code>[-1] `&lt;/p>
&lt;p>14&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在数组中找到出现次数大于一半的数 | 时间限制：2秒 | 内存限制：262144K给定一个整型数组arr，请打印其中出现次数大于一半的数，如果没有这样的数，请输出-1。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[11,7,5,7,7]&lt;code>输出&lt;/code>7 &lt;code>示例2输入&lt;/code>[2,2,3,3]&lt;code>输出&lt;/code>-1 `&lt;/p>
&lt;p>15&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：打印两个升序链表的公共部分 | 时间限制：2秒 | 内存限制：262144K给定两个升序链表，按升序打印两个升序链表的公共部分。示例1输入&lt;code>[1,2,3,4],[1,2,3,5,6]&lt;/code>输出&lt;code>[1,2,3] &lt;/code>&lt;/p>
&lt;p>16&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：表达式求值 | 时间限制：1秒 | 内存限制：262144K请写一个整数计算器，支持加减乘三种运算和括号。示例1输入&lt;code>&amp;quot;1+2&amp;quot;&lt;/code>输出&lt;code>3 &lt;/code>示例2输入&lt;code>&amp;quot;(2*(3-4))*5&amp;quot;&lt;/code>输出&lt;code>-10 &lt;/code>示例3输入&lt;code>&amp;quot;3+2*3*4-1&amp;quot;&lt;/code>输出&lt;code>26 &lt;/code>&lt;/p>
&lt;p>17&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：打印二叉树的边界节点 | 时间限制：3秒 | 内存限制：262144K给定一颗二叉树的根节点 root，按照如下两种标准分别实现二叉树的边界节点的逆时针打印。标准一：1，根节点为边界节点。2，叶节点为边界节点。3，如果节点在其所在的层中是最左的或最右的，那么该节点也是边界节点。标准二：1，根节点为边界节点。2，叶节点为边界节点。3，树左边界延伸下去的路径为边界节点。4，树右边界延伸下去的路径为边界节点。ps:具体请对照样例备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>{1,2,3,#,4,5,6,7,8,9,10,#,#,#,#,#,11,12,#,#,#,13,14,15,16}&lt;code>输出&lt;/code>[[1,2,4,7,11,13,14,15,16,12,10,6,3],[1,2,4,7,13,14,15,16,10,6,3]] `&lt;/p>
&lt;p>18&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：实现二叉树先序，中序和后序遍历 | 时间限制：3秒 | 内存限制：262144K分别按照二叉树先序，中序和后序打印所有的节点。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>{1,2,3}&lt;code>输出&lt;/code>[[1,2,3],[2,1,3],[2,3,1]] `&lt;/p>
&lt;p>19&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：链表的奇偶重排 | 时间限制：1秒 | 内存限制：262144K给定一个单链表，请设定一个函数，讲链表的奇数位节点和偶数位节点分别放在一起，重排后输出。注意是节点的编号而非节点的数值。&lt;/p>
&lt;p>备注:&lt;code>链表长度不大于200000。每个数范围均在int内。&lt;/code>示例1输入&lt;code>{1,2,3,4,5,6}&lt;/code>输出&lt;code>{1,3,5,2,4,6} &lt;/code>示例2输入&lt;code>{1,4,6,3,7}&lt;/code>输出&lt;code>{1,6,7,4,3} &lt;/code>说明&lt;code>奇数节点有1,6,7，偶数节点有4,3。重排后为1,6,7,4,3 &lt;/code>&lt;/p>
&lt;p>20&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：合并两个有序的单链表 | 时间限制：3秒 | 内存限制：262144K给定两个升序的单链表的头节点 head1 和 head2，请合并两个升序链表， 合并后的链表依然升序，并返回合并后链表的头节点。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3,4,5],[7,8,9,10,11,12]&lt;code>输出&lt;/code>{1,2,3,4,5,7,8,9,10,11,12} `&lt;/p>
&lt;p>21&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：股票交易的最大收益 | 时间限制：1秒 | 内存限制：262144K假定你知道某只股票每一天价格的变动。你最多可以同时持有一只股票。但你可以无限次的交易（买进和卖出均无手续费）。请设计一个函数，计算你所能获得的最大收益。
备注:&lt;code>总天数不大于200000。保证股票每一天的价格在[1,100]范围内。&lt;/code>示例1输入&lt;code>[5,4,3,2,1]&lt;/code>输出&lt;code>0 &lt;/code>说明&lt;code>由于每天股票都在跌，因此不进行任何交易最优。最大收益为0。 &lt;/code>示例2输入&lt;code>[1,2,3,4,5]&lt;/code>输出&lt;code>4 &lt;/code>说明&lt;code>第一天买进，最后一天卖出最优。中间的当天买进当天卖出不影响最终结果。最大收益为4。 &lt;/code>&lt;/p>
&lt;p>22&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：把数字翻译成字符串 | 时间限制：1秒 | 内存限制：262144K有一种将字母编码成数字的方式：'a'-&amp;gt;1, 'b-&amp;gt;2', ... , 'z-&amp;gt;26'。现在给一串数字，返回有多少种可能的译码结果示例1输入&lt;code>&amp;quot;12&amp;quot;&lt;/code>输出&lt;code>2 &lt;/code>说明&lt;code>2种可能的译码结果（”ab” 或”l”）&lt;/code>示例2输入&lt;code>&amp;quot;31717126241541717&amp;quot;&lt;/code>输出&lt;code>192 &lt;/code>说明&lt;code>192种可能的译码结果&lt;/code>&lt;/p>
&lt;p>23&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：一行代码求两个数的最大公约数 | 时间限制：2秒 | 内存限制：262144K给定两个不等于0的整数M和N，求M和N的最大公约数。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20M%2CN%20%5Cleq%2010%5E9" alt="img">&lt;code>示例1输入&lt;/code>6,12&lt;code>输出&lt;/code>6 &lt;code>示例2输入&lt;/code>2,3&lt;code>输出&lt;/code>1 `&lt;/p>
&lt;p>24&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：容器盛水问题 | 时间限制：2秒 | 内存限制：262144K给定一个整形数组arr，已知其中所有的值都是非负的，将这个数组看作一个容器，请返回容器能装多少水。具体请参考样例解释备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E6" alt="img">示例1输入&lt;code>[3,1,2,5,2,4]&lt;/code>输出&lt;code>5 &lt;/code>说明&lt;img src="https://uploadfiles.nowcoder.com/images/20200628/323944_1593310519156_4DCDFB8E8F161D1221ECC67C3E7A88F6" alt="img"> &lt;code>示例2输入&lt;/code>[4,5,1,3,2]&lt;code>输出&lt;/code>2 `&lt;/p>
&lt;p>25&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：加油站良好出发点问题 | 时间限制：2秒 | 内存限制：262144KN个加油站组成一个环形，给定两个长度都是N的非负数组oil和dis(N&amp;gt;1)，oil[i]代表第i个加油站存的油可以跑多少千米，dis[i]代表第i个加油站到环中下一个加油站相隔多少千米。假设你有一辆油箱足够大的车，初始时车里没有油。如果车从第i个加油站出发，最终可以回到这个加油站，那么第i个加油站就算良好出发点，否则就不算。请返回长度为N的boolean型数组res，res[i]代表第i个加油站是不是良好出发点&lt;strong>规定只能按照顺时针走，也就是i只能走到i+1，N只能走到1&lt;/strong>[要求]时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028155714_equation?tex=O(n)" alt="img">，空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028116908_equation?tex=O(1)" alt="img">备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=0%20%5Cleq%20oil_i%2C%20dis_i%20%5Cleq%2010%5E9" alt="img">&lt;code>示例1输入&lt;/code>[4,2,0,4,5,2,3,6,2],[6,1,3,1,6,4,1,1,6]&lt;code>输出&lt;/code>[0,0,0,0,0,0,0,0,0] &lt;code>示例2输入&lt;/code>[4,5,3,1,5,1,1,9],[1,9,1,2,6,0,2,0]&lt;code>输出&lt;/code>[0,0,1,0,0,1,0,1] `&lt;/p>
&lt;p>26&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断回文 | 时间限制：1秒 | 内存限制：262144K给定一个字符串，请编写一个函数判断该字符串是否回文。如果回文请返回true，否则返回false。备注:&lt;code>字符串长度不大于1000000，且仅由小写字母组成&lt;/code>示例1输入&lt;code>&amp;quot;absba&amp;quot;&lt;/code>输出&lt;code>true &lt;/code>示例2输入&lt;code>&amp;quot;ranko&amp;quot;&lt;/code>输出&lt;code>false &lt;/code>示例3输入&lt;code>&amp;quot;yamatomaya&amp;quot;&lt;/code>输出&lt;code>false &lt;/code>&lt;/p>
&lt;p>27&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断一棵二叉树是否为搜索二叉树和完全二叉树 | 时间限制：2秒 | 内存限制：262144K给定一棵二叉树，已经其中没有重复值的节点，请判断该二叉树是否为搜索二叉树和完全二叉树。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%20500000" alt="img">&lt;code>示例1输入&lt;/code>{2,1,3}&lt;code>输出&lt;/code>[true,true] `&lt;/p>
&lt;p>28&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：根据后序数组重建搜索二叉树 | 时间限制：2秒 | 内存限制：262144K给定一个有 n 个不重复整数的数组 arr，判断 arr 是否可能是节点值类型为整数的搜索二叉树后序遍历的结果。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20500000" alt="img">&lt;code>示例1输入&lt;/code>[1,3,2]&lt;code>输出&lt;/code>true `&lt;/p>
&lt;p>29&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断二叉树是否为平衡二叉树 | 时间限制：2秒 | 内存限制：262144K平衡二叉树的性质为: 要么是一棵空树，要么任何一个节点的左右子树高度差的绝对值不超过 1。给定一棵二叉树，判断这棵二叉树是否为平衡二叉树。一颗树的高度指的是树的根节点到所有节点的距离中的最大值。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20500000" alt="img">&lt;code>示例1输入&lt;/code>{1,2,3}&lt;code>输出&lt;/code>true `&lt;/p>
&lt;p>30&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断t1树中是否有与t2树拓扑结构完全相同的子树 | 时间限制：2秒 | 内存限制：262144K给定彼此独立的两棵二叉树，判断 t1 树是否有与 t2 树拓扑结构完全相同的子树。设 t1 树的边集为 E1，t2 树的边集为 E2，若 E2 等于 E1 ，则表示 t1 树和t2 树的拓扑结构完全相同。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20500000" alt="img">&lt;code>示例1输入&lt;/code>{1,2,3,4,5,6,7,#,8,9},{2,4,5,#,8,9}&lt;code>输出&lt;/code>true `&lt;/p>
&lt;p>31&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断t1树是否包含t2树全部的拓扑结构 | 时间限制：2秒 | 内存限制：262144K给定彼此独立的两棵二叉树，判断 t1 树是否包含 t2 树全部的拓扑结构。设 t1 树的边集为 E1，t2 树的边集为 E2，若 E2 是 E1 的子集，则表示 t1 树包含 t2 树全部的拓扑结构。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%2Cm%20%5Cleq%202000" alt="img">&lt;code>示例1输入&lt;/code>{1,2,3,4,5,6,7,8,9,10},{2,4,5,8}&lt;code>输出&lt;/code>true `&lt;/p>
&lt;p>32&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：找到二叉树中符合搜索二叉树条件的最大拓扑结构 | 时间限制：2秒 | 内存限制：262144K给定一颗二叉树，已知所有节点的值都不一样， 返回其中最大的且符合搜索二叉树条件的最大拓扑结构的大小。拓扑结构是指树上的一个联通块。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%202%20%5Ctimes%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>{2,1,3}&lt;code>输出&lt;/code>3 `&lt;/p>
&lt;p>33&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：找到二叉树中的最大搜索二叉子树 | 时间限制：3秒 | 内存限制：262144K给定一颗二叉树，已知其中所有节点的值都不一样，找到含有节点最多的搜索二叉子树，输出该子树总节点的数量。搜索二叉树是指对于二叉树的任何一个节点，如果它有儿子，那么左儿子的值应该小于它的值，右儿子的值应该大于它的值。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>{2,1,3}&lt;code>输出&lt;/code>3 `&lt;/p>
&lt;p>34&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在二叉树中找到累加和为指定值的最长路径长度 | 时间限制：2秒 | 内存限制：262144K给定一颗二叉树和一个整数 sum，求累加和为 sum 的最长路径长度。路径是指从某个节点往下，每次最多选择一个孩子节点或者不选所形成的节点链。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%202%20%5Ctimes%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>{-3,3,-9,1,0,2,1,#,#,1,6},-9&lt;code>输出&lt;/code>1 `&lt;/p>
&lt;p>35&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在二叉树中找到两个节点的最近公共祖先 | 时间限制：2秒 | 内存限制：262144K给定一棵二叉树以及这棵树上的两个节点 o1 和 o2，请找到 o1 和 o2 的最近公共祖先节点。 示例1输入&lt;code>[3,5,1,6,2,0,8,#,#,7,4],5,1&lt;/code>输出&lt;code>3 &lt;/code>&lt;/p>
&lt;p>36&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：通过先序和中序数组生成后序数组 | 时间限制：2秒 | 内存限制：262144K给出一棵二叉树的先序和中序数组，通过这两个数组直接生成正确的后序数组。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%2010000" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3],[2,1,3]&lt;code>输出&lt;/code>[2,3,1] `&lt;/p>
&lt;p>37&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：二叉树节点间的最大距离问题 | 时间限制：2秒 | 内存限制：262144K从二叉树的节点 A 出发，可以向上或者向下走，但沿途的节点只能经过一次，当到达节点 B 时，路径上的节点数叫作 A 到 B 的距离。现在给出一棵二叉树，求整棵树上每对节点之间的最大距离。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%20500000" alt="img">&lt;code>示例1输入&lt;/code>{1,2,3,4,5,6,7}&lt;code>输出&lt;/code>5 `&lt;/p>
&lt;p>38&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：股票交易的最大收益（二） | 时间限制：1秒 | 内存限制：262144K假定你知道某只股票每一天价格的变动。你最多可以同时持有一只股票。但你最多只能进行&lt;strong>两次&lt;/strong>交易（一次买进和一次卖出记为一次交易。买进和卖出均无手续费）。请设计一个函数，计算你所能获得的最大收益。备注:&lt;code>总天数不大于200000。保证股票每一天的价格在[1,100]范围内。&lt;/code>示例1输入&lt;code>[8,9,3,5,1,3]&lt;/code>输出&lt;code>4 &lt;/code>说明&lt;code>第三天买进，第四天卖出，第五天买进，第六天卖出。总收益为4。 &lt;/code>&lt;/p>
&lt;p>39&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：跳跃游戏 | 时间限制：2秒 | 内存限制：262144K给定数组arr，arr[i]==k代表可以从位置向右跳1~k个距离。比如，arr[2]==3,代表可以从位置2跳到位置3、位置4或位置5。如果从位置0出发，返回最少跳几次能跳到arr最后的位置上。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[3,2,3,1,1,4]&lt;code>输出&lt;/code>2 &lt;code>说明&lt;/code>arr[0]==3，选择跳到位置2，arr[2]==3,可以跳到最后的位置。所以返回2。`&lt;/p>
&lt;p>40&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：有关阶乘的两个问题 | 时间限制：2秒 | 内存限制：262144K给定一个非负整数N，如果用二进制数表达N!的结果，返回最低位的1在哪个位置上，认为最右的位置为位置0。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E%7B18%7D" alt="img">&lt;code>示例1输入&lt;/code>1&lt;code>输出&lt;/code>0 &lt;code>说明&lt;/code>1! = 1，最低位的1在0位置上&lt;code>示例2输入&lt;/code>2&lt;code>输出&lt;/code>1 &lt;code>说明&lt;/code>2 != 2，最低位的1在1位置上&lt;code>示例3输入&lt;/code>1000000000&lt;code>输出&lt;/code>999999987 `&lt;/p>
&lt;p>41&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：矩阵最长递增路径 | 时间限制：1秒 | 内存限制：262144K给定一个矩阵，矩阵内所有数均为非负整数。求一条路径，该路径上所有数是递增的。这个路径必须满足以下条件：1、对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外。2、你不能走重复的单元格。即每个格子最多只能走一次。
备注:&lt;code>矩阵的长和宽均不大于1000，矩阵内每个数不大于1000&lt;/code>示例1输入&lt;code>[[1,2,3],[4,5,6],[7,8,9]]&lt;/code>输出&lt;code>5 &lt;/code>说明&lt;code>1-&amp;gt;2-&amp;gt;3-&amp;gt;6-&amp;gt;9即可。当然这种递增路径不是唯一的。 &lt;/code>示例2输入&lt;code>[[1,2],[4,3]]&lt;/code>输出&lt;code>4 &lt;/code>说明&lt;code>1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/code>&lt;/p>
&lt;p>42&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：有关阶乘的两个问题1 | 时间限制：2秒 | 内存限制：262144K给定一个非负整数N，返回N!结果的末尾为0的数量备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E%7B18%7D" alt="img">&lt;code>示例1输入&lt;/code>3&lt;code>输出&lt;/code>0 &lt;code>说明&lt;/code>3!=6 &lt;code>示例2输入&lt;/code>5&lt;code>输出&lt;/code>1 &lt;code>说明&lt;/code>5!=120 &lt;code>示例3输入&lt;/code>1000000000&lt;code>输出&lt;/code>249999998 `&lt;/p>
&lt;p>43&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：汉诺塔问题 | 时间限制：2秒 | 内存限制：262144K给定一个整数n，代表汉诺塔游戏中从小到大放置n个圆盘，假设开始所有圆盘都在左边的柱子上，那么用最优的办法把所有圆盘都移动到右边的柱子上的过程，就称为最优移动轨迹。给定一个整型数组arr, 其中只含有1、2和3,代表所有圆盘目前的状态，1代表左柱，2代表中柱，3代表右柱，a[i]的值代表第i+1个圆盘的位置（a[i]下标从0开始）。比如，arr=[3,3,2,1], 代表第1个圆盘在右柱上、第2个圆盘在右柱上、第3个圆盘在中柱上、第4个圆盘在左柱上。如果arr代表的状态是最优移动轨迹过程中出现的状态，输出arr这种状态是最优移动轨迹中的第几个状态（由于答案可能较大，请输出对&lt;img src="https://www.nowcoder.com/equation?tex=10%5E9%2B7" alt="img">取模后的答案）。如果arr代表的状态不是最优移动轨迹过程中出现的状态，则输出-1。
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%202%20%5Ctimes%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>[1,1]&lt;code>输出&lt;/code>0 &lt;code>示例2输入&lt;/code>[3,3]&lt;code>输出&lt;/code>3 `&lt;/p>
&lt;p>44&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：大数乘法 | 时间限制：1秒 | 内存限制：262144K以字符串的形式读入两个数字，编写一个函数计算它们的乘积，以字符串形式返回。（字符串长度不大于10000，保证字符串仅由'0'~'9'这10种字符组成）
示例1输入&lt;code>&amp;quot;11&amp;quot;,&amp;quot;99&amp;quot;&lt;/code>输出&lt;code>&amp;quot;1089&amp;quot; &lt;/code>说明&lt;code>11*99=1089 &lt;/code>&lt;/p>
&lt;p>45&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：环形链表的约瑟夫问题 | 时间限制：2秒 | 内存限制：262144K据说著名犹太历史学家 Josephus 有过以下故事：在罗马人占领乔塔帕特后，39 个犹太人与 Josephus 及他的朋友躲到一个洞中，39 个犹太人决定宁愿死也不要被敌人抓到，于是决定了一种自杀方式，41 个人排成一个圆圈，由第 1 个人开始报数，报数到 3 的人就自杀，然后再由下一个人重新报 1，报数到 3 的人再自杀，这样依次下去，直到剩下最后一个人时，那个人可以自由选择自己的命运。这就是著名的约瑟夫问题。现在请用单向环形链表得出最终存活的人的编号。
n 表示环形链表的长度， m 表示每次报数到 m 就自杀。
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%2C%20m%20%5Cleq%2010000" alt="img">&lt;code>示例1输入&lt;/code>5,2&lt;code>输出&lt;/code>3 `&lt;/p>
&lt;p>46&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：随时找到数据流的中位数 | 时间限制：2秒 | 内存限制：262144K有一个源源不断的吐出整数的数据流，假设你有足够的空间来保存吐出的数。请设计一个名叫MedianHolder的结构，MedianHolder可以随时取得之前吐出所有数的中位数。
[要求]
\1. 如果MedianHolder已经保存了吐出的N个数，那么将一个新数加入到MedianHolder的过程，其时间复杂度是O(logN)。
\2. 取得已经吐出的N个数整体的中位数的过程，时间复杂度为O(1)
每行有一个整数opt表示操作类型
若opt=1，则接下来有一个整数N表示将N加入到结构中。
若opt=2，则表示询问当前所有数的中位数&lt;/p>
&lt;p>示例1输入&lt;code>[[1,5],[2],[1,3],[2],[1,6],[2],[1,7],[2]]&lt;/code>输出&lt;code>[5,4,5,5.5] &lt;/code>说明&lt;code>第一次查询时结构内的数为：5第二次查询时结构内的数为：3 5第二次查询时结构内的数为：3 5 6第二次查询时结构内的数为：3 5 6 7 &lt;/code>示例2输入&lt;code>[[2],[1,1],[2]]&lt;/code>输出&lt;code>[-1,1] &lt;/code>&lt;/p>
&lt;p>47&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：最长重复子串 | 时间限制：1秒 | 内存限制：262144K一个重复字符串是由两个相同的字符串首尾拼接而成，例如abcabc便是长度为6的一个重复字符串，而abcba则不存在重复字符串。给定一个字符串，请编写一个函数，返回其最长的重复字符子串。若不存在任何重复字符子串，则返回0。
备注:&lt;code>字符串长度不超过10000，且仅由小写字母组成&lt;/code>示例1输入&lt;code>&amp;quot;ababc&amp;quot;&lt;/code>输出&lt;code>4 &lt;/code>说明&lt;code>abab为最长的重复字符子串，长度为4 &lt;/code>示例2输入&lt;code>&amp;quot;abcab&amp;quot;&lt;/code>输出&lt;code>0 &lt;/code>说明&lt;code>该字符串没有重复字符子串 &lt;/code>&lt;/p>
&lt;p>48&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：反转部分单向链表 | 时间限制：4秒 | 内存限制：262144K给定一个单链表，在链表中把第 L 个节点到第 R 个节点这一部分进行反转。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3,4,5],1,3&lt;code>输出&lt;/code>{3,2,1,4,5} `&lt;/p>
&lt;p>49&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：test | 时间限制：1秒 | 内存限制：262144K21312示例1输入&lt;code>[1]&lt;/code>输出&lt;code>1 &lt;/code>&lt;/p>
&lt;p>50&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：反转单向链表 | 时间限制：4秒 | 内存限制：262144K实现反转单向链表的函数。如 1-&amp;gt;2-&amp;gt;3 反转后变成 3-&amp;gt;2-&amp;gt;1。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3]&lt;code>输出&lt;/code>{3,2,1}`&lt;/p>
&lt;p>51&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：分糖果问题进阶问题 | 时间限制：2秒 | 内存限制：262144K一群孩子做游戏，现在请你根据游戏得分来发糖果，要求如下：
\1. 每个孩子不管得分多少，起码分到一个糖果。
\2. 任意两个相邻的孩子之间，得分较多的孩子必须拿多一些糖果。
\3. 任意两个相邻的孩子之间的得分如果一样多，糖果数必须相同
给定一个数组arr代表得分数组，请返回最少需要多少糖果。
[要求]
时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190318/310694_1552907193384_equation?tex=O(N)" alt="img">, 空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190318/310694_1552907200650_equation?tex=O(1)" alt="img">备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=0%20%5Cleq%20a_i%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[1,2,2]&lt;code>输出&lt;/code>5 &lt;code>说明&lt;/code>最优分配方案为1, 2, 2&lt;code>示例2输入&lt;/code>[0,1,2,3,3,3,2,2,2,2,2,1,1]&lt;code>输出&lt;/code>30 &lt;code>说明&lt;/code>最优的分配方案为1 2 3 4 4 4 2 2 2 2 2 1 1`&lt;/p>
&lt;p>52&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断数组中所有的数字是否只出现一次 | 时间限制：2秒 | 内存限制：262144K给定一个数组arr，判断数组arr中是否所有的数字都只出现过一次。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3]&lt;code>输出&lt;/code>true &lt;code>示例2输入&lt;/code>[1,2,1]&lt;code>输出&lt;/code>false `&lt;/p>
&lt;p>53&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：可见的山峰对数量 | 时间限制：2秒 | 内存限制：262144K一个不含有负数的数组可以代表一圈环形山，每个位置的值代表山的高度。比如，{3,1,2,4,5}，{4,5,3,1,2}或{1,2,4,5,3}都代表同样结构的环形山。3-&amp;gt;1-&amp;gt;2-&amp;gt;4-&amp;gt;5-&amp;gt;3 方向叫作 next 方向(逆时针)，3-&amp;gt;5-&amp;gt;4-&amp;gt;2-&amp;gt;1-&amp;gt;3 方向叫作 last 方向(顺时针)。
山峰 A 和 山峰 B 能够相互看见的条件为:
\1. 如果 A 和 B 是同一座山，认为不能相互看见。
\2. 如果 A 和 B 是不同的山，并且在环中相邻，认为可以相互看见。
\3. 如果 A 和 B 是不同的山，并且在环中不相邻，假设两座山高度的最小值为 min。如果 A 通过 next 方向到 B 的途中没有高度比 min 大的山峰，或者 A 通过 last 方向到 B 的途中没有高度比 min 大的山峰，认为 A 和 B 可以相互看见。
问题如下：
给定一个不含有负数且没有重复值的数组 arr，请问有多少对山峰能够相互看见？
每组数据的第一行有三个数字 n, p, m，其中 n 表示 山峰的数量，
山峰的高度数组等于 1 - p 的 p! 个全排列按字典序排序后的第 m 个全排列的前 n 项。&lt;/p>
&lt;p>备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20T%20%5Cleq%2010000" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20p%20%5Cleq%2010%5E6" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20m%20%5Cleq%20p!" alt="img">&lt;code>示例1输入&lt;/code>[[5,5,2]]&lt;code>输出&lt;/code>[7] &lt;code>说明&lt;/code>1-5 的全排列排序后的第二个排列 为 1 2 3 5 4`&lt;/p>
&lt;p>54&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：派对的最大快乐值 | 时间限制：2秒 | 内存限制：262144K整个公司的人员结构可以看作是一棵标准的多叉树。树的头节点是公司唯一的老板，除老板外，每个员工都有唯一的直接上级，叶节点是没有任何下属的基层员工，除基层员工外，每个员工都有一个或多个直接下级，另外每个员工都有一个快乐值。这个公司现在要办 party，你可以决定哪些员工来，哪些员工不来。但是要遵循如下的原则：1.如果某个员工来了，那么这个员工的所有直接下级都不能来。2.派对的整体快乐值是所有到场员工快乐值的累加。3.你的目标是让派对的整体快乐值尽量大。给定一棵多叉树，请输出派对的最大快乐值。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20500000" alt="img">&lt;code>示例1输入&lt;/code>[[1,2],[1,3]],[0,5,1,1],1&lt;code>输出&lt;/code>5 `&lt;/p>
&lt;p>55&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在有序但是含有空的数组中查找字符串 | 时间限制：2秒 | 内存限制：262144K给定一个字符串数组strs[]，在strs中有些位置为null，但在不为null的位置上，其字符串是按照字典序由小到大出现的。在给定一个字符串str，请返回str在strs中出现的最左位置，如果strs中不存在str请输出“-1”。
每行包含一个字符串构成，字符串只包含小写字符，如果这一行为“0”，代表该行字符串为空，这n行字符串代表strs。
备注:&lt;img src="https://www.nowcoder.com/equation?tex=%7Csrr_i%7C%20%5Cleq%2010" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[&amp;quot;0&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;a&amp;quot;,&amp;quot;ab&amp;quot;,&amp;quot;ac&amp;quot;,&amp;quot;0&amp;quot;,&amp;quot;b&amp;quot;],&amp;quot;a&amp;quot;&lt;code>输出&lt;/code>1 &lt;code>说明&lt;/code>在strs中，最左边的“a”在位置1，strs为[null,&amp;quot;a&amp;quot;,null,&amp;quot;a&amp;quot;,&amp;quot;ab&amp;quot;,&amp;quot;ac&amp;quot;,null,&amp;quot;b&amp;quot;]`&lt;/p>
&lt;p>56&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：矩阵的最小路径和 | 时间限制：2秒 | 内存限制：262144K给定一个 n * m 的矩阵 a，从左上角开始每次只能向右或者向下走，最后到达右下角的位置，路径上所有的数字累加起来就是路径和，输出所有的路径中最小的路径和。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%2Cm%20%5Cleq%202000" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20arr_%7Bi%2Cj%7D%20%5Cleq%20100" alt="img">&lt;code>示例1输入&lt;/code>[[1,3,5,9],[8,1,3,4],[5,0,6,1],[8,8,4,0]]&lt;code>输出&lt;/code>12 `&lt;/p>
&lt;p>57&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：将整数字符串转成整数值 | 时间限制：2秒 | 内存限制：262144K给定一个字符串str，如果str符合日常书写的整数形式，并且属于32位整数范围，返回str代表的整数值，否则返回0。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr%7C%20%5Cleq%20100" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;123&amp;quot;&lt;code>输出&lt;/code>123 &lt;code>示例2输入&lt;/code>&amp;quot;023&amp;quot;&lt;code>输出&lt;/code>0 &lt;code>示例3输入&lt;/code>&amp;quot;A13&amp;quot;&lt;code>输出&lt;/code>0 &lt;code>示例4输入&lt;/code>&amp;quot;2147483648&amp;quot;&lt;code>输出&lt;/code>0 `&lt;/p>
&lt;p>58&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：统计和生成所有不同的二叉树(进阶) | 时间限制：2秒 | 内存限制：262144K给出一个整数 n，如果 n &amp;lt; 1，代表空树，否则代表中序遍历的结果为 {1, 2, 3... n}。请输出可能的二叉树结构有多少。答案对1e9+7取模备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>8&lt;code>输出&lt;/code>1430 `&lt;/p>
&lt;p>59&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断两个字符串是否互为旋转词 | 时间限制：2秒 | 内存限制：262144K如果一个字符串为str，把字符串的前面任意部分挪到后面形成的字符串交str的旋转词。比如str=“12345”，str的旋转串有“12345”、“45123”等等。给定两个字符串，判断是否为旋转词。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr_1%7C%2C%7Cstr_2%7C%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;abcd&amp;quot;,&amp;quot;cdab&amp;quot;&lt;code>输出&lt;/code>true &lt;code>示例2输入&lt;/code>&amp;quot;ab&amp;quot;,&amp;quot;aaa&amp;quot;&lt;code>输出&lt;/code>false `&lt;/p>
&lt;p>60&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：最大的leftMax与rightMax之差的绝对值 | 时间限制：2秒 | 内存限制：262144K给定一个长度为N(N&amp;gt;1)的整形数组arr, 可以划分成左右两个部分，左部分为arr[0…K]，右部分为arr[K+1…N-1], K可以取值的范围是[0,N-2]。求这么多划分方案中，左部分中的最大值减去右部分最大值的绝对值中，最大是多少[要求]时间复杂度为O(n), 空间复杂度为O(n)备注:&lt;img src="https://www.nowcoder.com/equation?tex=%5Cbegin%7Barray%7D%7Bl%7D1%20%5Cleqslant%20N%20%5Cleqslant%2010%5E%7B6%7D%20%5C%5C%201%20%5Cleqslant%20a%20r%20r_%7Bi%7D%20%5Cleqslant%2010%5E%7B9%7D%5Cend%7Barray%7D" alt="img">&lt;code>示例1输入&lt;/code>[2,7,3,1,1]&lt;code>输出&lt;/code>6 &lt;code>说明&lt;/code>当左部分为[2, 7]，右部分为[3, 1, 1]时，左部分中的最大值减去右部分的最大值的绝对值为4,。当左部分为[2, 7, 3]，右部分为[1, 1]时，左部分中的最大值减去右部分最大值的绝对值为6。还有很多划分方案，但最终返回6.`&lt;/p>
&lt;p>61&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断两个字符串是否为变形词 | 时间限制：2秒 | 内存限制：262144K给定两个字符串str1和str2，如果str1和str2中出现的字符种类出现的一样且每种字符出现的次数也一样，那么str1和str2互为变形词。请判断str1和str2是否为变形词。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr_1%7C%2C%20%7Cstr_2%7C%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;123&amp;quot;,&amp;quot;321&amp;quot;&lt;code>输出&lt;/code>true &lt;code>示例2输入&lt;/code>&amp;quot;123&amp;quot;,&amp;quot;2331&amp;quot;&lt;code>输出&lt;/code>false `&lt;/p>
&lt;p>62&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：统计和生成所有不同的二叉树 | 时间限制：2秒 | 内存限制：262144K给出一个整数 n，如果 n &amp;lt; 1，代表空树，否则代表中序遍历的结果为 {1, 2, 3... n}。请输出可能的二叉树结构有多少。答案对1e9+7取模备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010000" alt="img">&lt;code>示例1输入&lt;/code>7&lt;code>输出&lt;/code>429 `&lt;/p>
&lt;p>63&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：N皇后问题 | 时间限制：2秒 | 内存限制：262144KN皇后问题是指在N*N的棋盘上要摆N个皇后，要求任何两个皇后不同行，不同列也不再同一条斜线上，求给一个整数n，返回n皇后的摆法。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2014" alt="img">&lt;code>示例1输入&lt;/code>1&lt;code>输出&lt;/code>1 &lt;code>示例2输入&lt;/code>8&lt;code>输出&lt;/code>92 `&lt;/p>
&lt;p>64&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：数组中的最长连续子序列 | 时间限制：2秒 | 内存限制：262144K给定无序数组arr，返回其中最长的连续序列的长度(要求值连续，位置可以不连续,例如 3,4,5,6为连续的自然数）备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20arr_i%20%5Cleq%2010%5E8" alt="img">&lt;code>示例1输入&lt;/code>[100,4,200,1,3,2]&lt;code>输出&lt;/code>4 &lt;code>示例2输入&lt;/code>[1,1,1]&lt;code>输出&lt;/code>1 `&lt;/p>
&lt;p>65&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：最长递增子序列 | 时间限制：2秒 | 内存限制：262144K给定数组arr，设长度为n，输出arr的最长递增子序列。（如果有多个答案，请输出其中字典序最小的）备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20arr_i%20%5Cleq%2010%5E9" alt="img">&lt;code>示例1输入&lt;/code>[2,1,5,3,6,4,8,9,7]&lt;code>输出&lt;/code>[1,3,4,8,9] &lt;code>示例2输入&lt;/code>[1,2,8,6,4]&lt;code>输出&lt;/code>[1,2,4] &lt;code>说明&lt;/code>其最长递增子序列有3个，（1，2，8）、（1，2，6）、（1，2，4）其中第三个字典序最小，故答案为（1，2，4）`&lt;/p>
&lt;p>66&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：画匠问题 | 时间限制：2秒 | 内存限制：262144K给定一个整型数组arr, 数组中的每个值都为正数，表示完成一幅画作需要的时间，再给定一个整数num，表示画匠的数量，每个画匠只能画连在一起(即数组内连续的一段)的画作。所有画家并行工作，请返回完成所有的画作的最少时间。[要求]时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190319/310694_1552965674024_equation?tex=O(n%20%5Clog%20S)" alt="img">(其中S表示所有画作所需时间的和)备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20K%20%5Cleq%20N%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%5Csum%20arr_i%20%5Cleq%2010%5E%7B18%7D" alt="img">&lt;code>示例1输入&lt;/code>[3,1,4],2&lt;code>输出&lt;/code>4 &lt;code>说明&lt;/code>最好的分配方式为第一个画匠画3和1，所需时间为4，第二个画匠画4，所需时间为4。因为并行工作，所以最少时间为4，如果分配方式为第一个画匠画3，所需时间为3，第二个画匠画1和4，所需的时间为5，那么最少时间为5，显然没有第一种分配方式好，所以返回4&lt;code>示例2输入&lt;/code>[1,1,1,4,3],3&lt;code>输出&lt;/code>4 &lt;code>说明&lt;/code>最好的分配方式为第一个画匠画前三个1，所需时间为3，第二个画匠画4，所需时间为4，第三个画匠画3，所需时间为3，返回4&lt;code>示例3输入&lt;/code>[99,82,44,35,3],2&lt;code>输出&lt;/code>164 &lt;code>说明&lt;/code>[99] [82 44 35 3]`&lt;/p>
&lt;p>67&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：丢棋子问题 | 时间限制：2秒 | 内存限制：262144K一座大楼有&lt;img src="https://uploadfiles.nowcoder.com/files/20190319/310694_1552962819992_equation?tex=0%20%5Csim%20N" alt="img">层，地面算作第0层，最高的一层为第N层。已知棋子从第0层掉落肯定不会摔碎，从第i层掉落可能会摔碎，也可能不会摔碎(&lt;img src="https://uploadfiles.nowcoder.com/files/20190319/310694_1552962885844_equation?tex=1%20%5Cleqslant%20i%20%5Cleqslant%20N" alt="img">)。给定整数N作为楼层数，再给定整数K作为棋子数，返回如果想找到棋子不会摔碎的最高层数，即使在最差的情况下扔的最小次数。一次只能扔一个棋子。[要求]时间复杂度在最坏情况下为&lt;img src="https://uploadfiles.nowcoder.com/files/20190319/310694_1552961391189_equation?tex=O(n)" alt="img">备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%2CK%20%5Cleq%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>10,1&lt;code>输出&lt;/code>10 &lt;code>说明&lt;/code>因为只有1棵棋子，所以不得不从第1层开始一直试到第10层，在最差的情况下，即第10层是不会摔坏的最高层，最少也要扔10次&lt;code>示例2输入&lt;/code>3,2&lt;code>输出&lt;/code>2 &lt;code>说明&lt;/code>先在2层扔1棵棋子，如果碎了，试第1层，如果没碎，试第3层&lt;code>示例3输入&lt;/code>105,2&lt;code>输出&lt;/code>14 &lt;code>说明&lt;/code>第一个棋子先在14层扔，碎了则用仅存的一个棋子试1~13层若没碎，第一个棋子继续在27层扔，碎了则用仅存的一个棋子试15~26层若没碎，第一个棋子继续在39层扔，碎了则用仅存的一个棋子试28~38层若没碎，第一个棋子继续在50层扔，碎了则用仅存的一个棋子试40~49层若没碎，第一个棋子继续在60层扔，碎了则用仅存的一个棋子试51~59层若没碎，第一个棋子继续在69层扔，碎了则用仅存的一个棋子试61~68层若没碎，第一个棋子继续在77层扔，碎了则用仅存的一个棋子试70~76层若没碎，第一个棋子继续在84层扔，碎了则用仅存的一个棋子试78~83层若没碎，第一个棋子继续在90层扔，碎了则用仅存的一个棋子试85~89层若没碎，第一个棋子继续在95层扔，碎了则用仅存的一个棋子试91~94层若没碎，第一个棋子继续在99层扔，碎了则用仅存的一个棋子试96~98层若没碎，第一个棋子继续在102层扔，碎了则用仅存的一个棋子试100、101层若没碎，第一个棋子继续在104层扔，碎了则用仅存的一个棋子试103层若没碎，第一个棋子继续在105层扔，若到这一步还没碎，那么105便是结果`&lt;/p>
&lt;p>68&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：出现次数的TopK问题 | 时间限制：2秒 | 内存限制：262144K给定String类型的数组strArr，再给定整数k，请严格按照排名顺序打印 出次数前k名的字符串。[要求]如果strArr长度为N，时间复杂度请达到&lt;img src="https://uploadfiles.nowcoder.com/files/20190318/310694_1552917525089_equation?tex=O(N%20%5Clog%20K)" alt="img">
输出K行，每行有一个字符串和一个整数（字符串表示）。
你需要按照出现出现次数由大到小输出，若出现次数相同时字符串字典序较小的优先输出&lt;/p>
&lt;p>备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;],2&lt;code>输出&lt;/code>[[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;],[&amp;quot;2&amp;quot;,&amp;quot;1&amp;quot;]] &lt;code>示例2输入&lt;/code>[&amp;quot;1&amp;quot;,&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;],2&lt;code>输出&lt;/code>[[&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;],[&amp;quot;2&amp;quot;,&amp;quot;1&amp;quot;]] `&lt;/p>
&lt;p>69&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：环形链表的约瑟夫问题(进阶) | 时间限制：2秒 | 内存限制：262144K据说著名犹太历史学家 Josephus 有过以下故事：在罗马人占领乔塔帕特后，39 个犹太人与 Josephus 及他的朋友躲到一个洞中，39 个犹太人决定宁愿死也不要被敌人抓到，于是决定了一种自杀方式，41 个人排成一个圆圈，由第 1 个人开始报数，报数到 3 的人就自杀，然后再由下一个人重新报 1，报数到 3 的人再自杀，这样依次下去，直到剩下最后一个人时，那个人可以自由选择自己的命运。这就是著名的约瑟夫问题。现在请用单向环形链表得出最终存活的人的编号。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%2Cm%20%5Cleq%205%20%5Ctimes%2010%5E6" alt="img">&lt;code>示例1输入&lt;/code>5,2&lt;code>输出&lt;/code>3 `&lt;/p>
&lt;p>70&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：在两个长度相等的排序数组中找到上中位数 | 时间限制：2秒 | 内存限制：262144K给定两个有序数组arr1和arr2，已知两个数组的长度都为N，求两个数组中所有数的上中位数。上中位数：假设递增序列长度为n，若n为奇数，则上中位数为第n/2+1个数；否则为第n个数[要求]时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190318/310694_1552913791540_equation?tex=O(logN)" alt="img">，额外空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190318/310694_1552907200650_equation?tex=O(1)" alt="img">备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=0%20%5Cleq%20arr_%7B1i%7D%2C%20arr_%7B2i%7D%20%5Cleq%2010%5E9" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3,4],[3,4,5,6]&lt;code>输出&lt;/code>3 &lt;code>说明&lt;/code>总共有8个数，上中位数是第4小的数，所以返回3。&lt;code>示例2输入&lt;/code>[0,1,2],[3,4,5]&lt;code>输出&lt;/code>2 &lt;code>说明&lt;/code>总共有6个数，那么上中位数是第3小的数，所以返回2`&lt;/p>
&lt;p>71&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：矩阵乘法 | 时间限制：1秒 | 内存限制：262144K给定两个n&lt;em>n的矩阵A和B，求A&lt;/em>B。备注:&lt;img src="https://www.nowcoder.com/equation?tex=n%E2%89%A4500%5C" alt="img"> ，初始两个矩阵中每个数 &lt;img src="https://www.nowcoder.com/equation?tex=0%E2%89%A4a_%7Bij%7D%E2%89%A4100" alt="img">&lt;code>示例1输入&lt;/code>[[1,2],[3,2]],[[3,4],[2,1]]&lt;code>输出&lt;/code>[[7,6],[13,14]] `&lt;/p>
&lt;p>72&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：邮局选址问题 | 时间限制：2秒 | 内存限制：262144K一条直线上有居民点，邮局只能建在居民点上。给定一个有序整形数组arr，每个值表示居民点的一维坐标，再给定一个正数num，表示邮局数量。选择num个居民点建立num个邮局，使所有的居民点到邮局的总距离最短，返回最短的总距离。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%203000" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20arr_i%20%5Cleq%2010%5C%2C000" alt="img">&lt;code>示例1输入&lt;/code>[1,2,3,4,5,1000],2&lt;code>输出&lt;/code>6 &lt;code>说明&lt;/code>第一个邮局建立在3位置，第二个邮局建立在1000位置。那么1位置到邮局的距离为2,2位置到邮局距离为1,3位置到邮局的距离为0，4位置到邮局的距离为1,5位置到邮局的距离为2,1000位置到邮局的距离为0.这种方案下的总距离为6。`&lt;/p>
&lt;p>73&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：信封嵌套问题 | 时间限制：2秒 | 内存限制：262144K给n个信封的长度和宽度。如果信封A的长和宽都小于信封B，那么信封A可以放到信封B里，请求出信封最多可以嵌套多少层。
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[[3,4],[2,3],[4,5],[1,3],[2,2],[3,6],[1,2],[3,2],[2,4]]&lt;code>输出&lt;/code>4 &lt;code>说明&lt;/code>从里到外分别是{1，2}，{2，3}，{3，4}，{4，5}。&lt;code>示例2输入&lt;/code>[[1,4],[4,1]]&lt;code>输出&lt;/code>1 `&lt;/p>
&lt;p>74&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：最长公共子串 | 时间限制：2秒 | 内存限制：262144K给定两个字符串str1和str2,输出两个字符串的最长公共子串，如果最长公共子串为空，输出-1。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr_1%7C%2C%20%7Cstr_2%7C%20%5Cleq%205%5C%2C000" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;1AB2345CD&amp;quot;,&amp;quot;12345EF&amp;quot;&lt;code>输出&lt;/code>&amp;quot;2345&amp;quot; `&lt;/p>
&lt;p>75&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：寻找峰值 | 时间限制：1秒 | 内存限制：262144K山峰元素是指其值大于或等于左右相邻值的元素。给定一个输入数组nums，任意两个相邻元素值不相等，数组可能包含多个山峰。找到索引最大的那个山峰元素并返回其索引。假设 nums[-1] = nums[n] = -∞。示例1输入&lt;code>[2,4,1,2,7,8,4]&lt;/code>输出&lt;code>5 &lt;/code>&lt;/p>
&lt;p>76&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：大数加法 | 时间限制：1秒 | 内存限制：262144K以字符串的形式读入两个数字，编写一个函数计算它们的和，以字符串形式返回。（字符串长度不大于100000，保证字符串仅由'0'~'9'这10种字符组成）
示例1输入&lt;code>&amp;quot;1&amp;quot;,&amp;quot;99&amp;quot;&lt;/code>输出&lt;code>&amp;quot;100&amp;quot; &lt;/code>说明&lt;code>1+99=100 &lt;/code>&lt;/p>
&lt;p>77&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：判断一个点是否在三角形内部 | 时间限制：2秒 | 内存限制：262144K在二维坐标系中，所有的值都是double类型，那么一个三角形可以由3个点来代表，给定3个点代表的三角形，再给定一个点(x, y)，判断(x, y)是否在三角形中备注:&lt;img src="https://www.nowcoder.com/equation?tex=0%20%5Cleq%20%7Cx_1%7C%2C%7Cx_2%7C%2C%7Cx_3%7C%2C%7Cy_1%7C%2C%7Cy_2%7C%2C%7Cy_3%7C%2C%7Cx%7C%2C%7Cy%7C%20%5Cleq%202%20%5Ctimes%2010%5E%7B10%7D" alt="img">&lt;code>示例1输入&lt;/code>-1,0,1.5,3.5,2.73,-3.12,2333.33,2333333.33&lt;code>输出&lt;/code>false &lt;code>示例2输入&lt;/code>-1,0,1.5,3.5,2.73,-3.12,1.23,0.23&lt;code>输出&lt;/code>true `&lt;/p>
&lt;p>78&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：字符串的交错组成 | 时间限制：2秒 | 内存限制：262144K给定三个字符串str1、str2 和aim,如果aim包含且仅包含来自str1和str2的所有字符，而且在aim中属于str1的字符之间保持原来在str1中的顺序属于str2的字符之间保持原来在str2中的顺序，那么称aim是str1和str2的交错组成。实现一个函数，判断aim是否是str1和str2交错组成.
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cs1%7C%2C%20%7Cs2%7C%20%5Cleq%205%5C%2C000" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Caim%7C%20%5Cleq%2010%5C%2C000" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;AB&amp;quot;,&amp;quot;12&amp;quot;,&amp;quot;1A2B&amp;quot;&lt;code>输出&lt;/code>true &lt;code>示例2输入&lt;/code>&amp;quot;2019&amp;quot;,&amp;quot;9102&amp;quot;,&amp;quot;22001199&amp;quot;&lt;code>输出&lt;/code>false `&lt;/p>
&lt;p>79&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：LFU缓存结构设计 | 时间限制：2秒 | 内存限制：262144K一个缓存结构需要实现如下功能。set(key, value)：将记录(key, value)插入该结构get(key)：返回key对应的value值但是缓存结构中最多放K条记录，如果新的第K+1条记录要加入，就需要根据策略删掉一条记录，然后才能把新记录加入。这个策略为：在缓存结构的K条记录中，哪一个key从进入缓存结构的时刻开始，被调用set或者get的次数最少，就删掉这个key的记录；如果调用次数最少的key有多个，上次调用发生最早的key被删除这就是LFU缓存替换算法。实现这个结构，K作为参数给出
[要求]set和get方法的时间复杂度为O(1)
若opt=1，接下来两个整数x, y，表示set(x, y)
若opt=2，接下来一个整数x，表示get(x)，若x未出现过或已被移除，则返回-1&lt;/p>
&lt;p>对于每个操作2，输出一个答案
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20k%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=-2%20%5Ctimes%2010%5E9%20%5Cleq%20x%2Cy%20%5Cleq%202%20%5Ctimes%2010%5E9" alt="img">&lt;code>示例1输入&lt;/code>[[1,1,1],[1,2,2],[1,3,2],[1,2,4],[1,3,5],[2,2],[1,4,4],[2,1]],3&lt;code>输出&lt;/code>[4,-1] &lt;code>说明&lt;/code>在执行&amp;quot;1 2 4&amp;quot;后，&amp;quot;1 1 1&amp;quot;被删除。因此第二次询问的答案为-1`&lt;/p>
&lt;p>80&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：最小编辑代价 | 时间限制：2秒 | 内存限制：262144K给定两个字符串str1和str2，再给定三个整数ic，dc和rc，分别代表插入、删除和替换一个字符的代价，请输出将str1编辑成str2的最小代价。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr_1%7C%2C%20%7Cstr_2%7C%20%5Cleq%205000" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20ic%2C%20dc%2C%20rc%20%5Cleq%2010000" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;abc&amp;quot;,&amp;quot;adc&amp;quot;,5,3,2&lt;code>输出&lt;/code>2 &lt;code>示例2输入&lt;/code>&amp;quot;abc&amp;quot;,&amp;quot;adc&amp;quot;,5,3,100&lt;code>输出&lt;/code>8 `&lt;/p>
&lt;p>81&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：子数组异或和为0的最多划分 | 时间限制：2秒 | 内存限制：262144K给定一个整型数组arr，其中可能有正有负有零。你可以随意把整个数组切成若干个不相容的子数组，求异或和为0的子数组最多可能有多少个？整数异或和定义：把数组中所有的数异或起来得到的值。示例1输入&lt;code>[3,2,1,9,0,7,0,2,1,3]&lt;/code>输出&lt;code>4 &lt;/code>说明&lt;code>最优划分：{3,2,1},{9},{0},{7},{0},{2,1,3} 其中{3,2,1},{0},{0},{2,1,3}的异或和为0&lt;/code>&lt;/p>
&lt;p>82&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：数组中未出现的最小正整数 | 时间限制：2秒 | 内存限制：262144K给定一个无序数组arr，找到数组中未出现的最小正整数例如arr = [-1, 2, 3, 4]。返回1arr = [1, 2, 3, 4]。返回5[要求]时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028155714_equation?tex=O(n)" alt="img">，空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028116908_equation?tex=O(1)" alt="img">
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E6" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=%7Carr_i%7C%20%5Cleq%2010%5E9" alt="img">&lt;code>示例1输入&lt;/code>[-1,2,3,4]&lt;code>输出&lt;/code>1 `&lt;/p>
&lt;p>83&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：输出二叉树的右视图 | 时间限制：1秒 | 内存限制：262144K请根据二叉树的前序遍历，中序遍历恢复二叉树，并打印出二叉树的右视图备注:&lt;code>二叉树每个节点的值在区间[1,10000]内，且保证每个节点的值互不相同。&lt;/code>示例1输入&lt;code>[1,2,4,5,3],[4,2,5,1,3]&lt;/code>输出&lt;code>[1,3,5] &lt;/code>&lt;/p>
&lt;p>84&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：求最短通路值 | 时间限制：2秒 | 内存限制：262144K用一个整形矩阵matrix表示一个网格，1代表有路，0代表无路，每一个位置只要不越界，都有上下左右四个方向，求从最左上角到右下角的最短通路值例如，matrix为：1 0 1 1 11 0 1 0 11 1 1 0 10 0 0 0 1通路只有一条，由12个1构成，所以返回12[要求]时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028630474_equation?tex=O(nm)" alt="img">，空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028630474_equation?tex=O(nm)" alt="img">
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%2CM%20%5Cleq%201000" alt="img">&lt;code>示例1输入&lt;/code>[&amp;quot;10111&amp;quot;,&amp;quot;10101&amp;quot;,&amp;quot;11101&amp;quot;,&amp;quot;00001&amp;quot;]&lt;code>输出&lt;/code>12 `&lt;/p>
&lt;p>85&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：正数数组的最小不可组成和 | 时间限制：2秒 | 内存限制：262144K给定一个正数数组arr，其中所有的值都为整数，以下是最小不可组成和的概念把arr每个子集内的所有元素加起来会出现很多值，其中最小的记为min，最大的记为max在区间[min, max]上，如果有数不可以被arr某一个子集相加得到，那么其中最小的那个数是arr的最小不可组成和在区间[min, max]上，如果所有的数都可以被arr的某一个子集相加得到，那么max+1是arr的最小不可组成和请写函数返回正数数组arr的最小不可组成和时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190224/310694_1550999309701_equation?tex=O(n%20%5Ctimes%20%5Csum_%7Bi%3D1%7D%5En%20arr_i)" alt="img">，额外空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190224/310694_1550999309701_equation?tex=O(n%20%5Ctimes%20%5Csum_%7Bi%3D1%7D%5En%20arr_i)" alt="img">备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%20100" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=N%20%3C%20(%5Csum%5EN_%7Bi%20%3D%201%7D%20arr_i)%20%5Cleq%2010%5E4" alt="img">&lt;code>示例1输入&lt;/code>[2,3,9]&lt;code>输出&lt;/code>4 &lt;code>示例2输入&lt;/code>[1,2,4]&lt;code>输出&lt;/code>8 &lt;code>说明&lt;/code>3 = 1 + 25 = 1 + 46 = 2 + 47 = 1 + 2 + 4`&lt;/p>
&lt;p>86&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：数字的英文表达和中文表达 | 时间限制：2秒 | 内存限制：262144K给定一个32位整数num，写两个函数分别返回num的英文与中文表达字符串注意: 如果你的程序出现了本地测试争取但题解错误的情况，请检查字符集以及行末空格问题[举例]
num=319英文表达字符串为：Three Hundred Nineteen中文表达字符串为：三百一十九num=1014英文表达字符串为：One Thousand, Fourteen中文表达字符串为：一千零十四num=-2147483648英文表达字符串为：Negative, Two Billion, One Hundred Forty Seven Million, Four Hundred Eighty Three Thousand, Six Hundred Forty Eight中文表达字符串为：负二十一亿四千七百四十八万三千六百四十八num=0英文表达字符串为：Zero中文表达字符串为：零示例1输入&lt;code>319&lt;/code>输出&lt;code>[&amp;quot;Three Hundred Nineteen&amp;quot;,&amp;quot;三百一十九&amp;quot;] &lt;/code>示例2输入&lt;code>1014&lt;/code>输出&lt;code>[&amp;quot;One Thousand, Fourteen&amp;quot;,&amp;quot;一千零十四&amp;quot;] &lt;/code>示例3输入&lt;code>-2147483648&lt;/code>输出&lt;code>[&amp;quot;Negative, Two Billion, One Hundred Forty Seven Million, Four Hundred Eighty Three Thousand, Six Hundred Forty Eight&amp;quot;,&amp;quot;负二十一亿四千七百四十八万三千六百四十八&amp;quot;] &lt;/code>&lt;/p>
&lt;p>87&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：路径数组变为统计数组 | 时间限制：2秒 | 内存限制：262144K给定一个路径统计数组paths，表示一张图。paths[i]==j代表城市i连向城市j，如果paths[i]==i，则表示i城市是首都，一张图里只会有一个首都且图中除首都指向自己之外不会有环。例如，paths=[9,1,4,9,0,4,8,9,0,1]，代表的图如图9-14所示。由数组表示的图可以知道，城市1是首都，所以距离为0，离首都距离为1的城市只有城市9，离首都距离为2的城市有城市0、3和7，离首都距离为3的城市有城市4和8，离首都距离为4的城市有城市2、5和6。所以距离为0的城市有1座，距离为1的城市有1座，距离为2的城市有3座，距离为3的城市有2座，距离为4的城市有3座。那么统计数组为nums=[1,1,3,2,3,0,0,0,0,0][要求]时间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028155714_equation?tex=O(n)" alt="img">，额外空间复杂度为&lt;img src="https://uploadfiles.nowcoder.com/files/20190201/310694_1549028116908_equation?tex=O(1)" alt="img">备注:&lt;img src="https://www.nowcoder.com/equation?tex=N%20%5Cleq%202%20%5Ctimes%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[9,1,4,9,0,4,8,9,0,1]&lt;code>输出&lt;/code>[1,1,3,2,3,0,0,0,0,0] `&lt;/p>
&lt;p>88&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：字符串的转换路径问题 | 时间限制：2秒 | 内存限制：262144K给定两个字符串，记为start和to，再给定一个字符串列表list，list中一定包含to，list中没有重复的字符串。所有的字符串都是小写的。规定start每次只能改变一个字符，最终的目标是彻底变成to，但是每次变成新字符串必须在list中存在。请返回所有的最短的变换路径（按照字典序最小的顺序输出）。
如果存在转换的路径，请先输出“YES”，然后按照字典序最小的顺序输出所有路径。如果不存在请输出“NO”。
备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%205%5C%2C000" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=%7Cstart%7C%2C%7Cto%7C%2C%7Clis_i%7C%20%3D%203" alt="img">&lt;code>示例1输入&lt;/code>[&amp;quot;cab&amp;quot;,&amp;quot;acc&amp;quot;,&amp;quot;cbc&amp;quot;,&amp;quot;ccc&amp;quot;,&amp;quot;cac&amp;quot;,&amp;quot;abb&amp;quot;,&amp;quot;aab&amp;quot;,&amp;quot;abb&amp;quot;],&amp;quot;abc&amp;quot;,&amp;quot;cab&amp;quot;&lt;code>输出&lt;/code>[&amp;quot;YES&amp;quot;,&amp;quot;abc -&amp;gt; abb -&amp;gt; aab -&amp;gt; cab&amp;quot;,&amp;quot;abc -&amp;gt; cbc -&amp;gt; cac -&amp;gt; cab&amp;quot;] `&lt;/p>
&lt;p>89&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：验证IP地址 | 时间限制：1秒 | 内存限制：32768K编写一个函数来验证输入的字符串是否是有效的 IPv4 或 IPv6 地址&lt;/p>
&lt;p>IPv4 地址由十进制数和点来表示，每个地址包含4个十进制数，其范围为 0 - 255， 用(&amp;quot;.&amp;quot;)分割。比如，172.16.254.1；
同时，IPv4 地址内的数不会以 0 开头。比如，地址 172.16.254.01 是不合法的。&lt;/p>
&lt;p>IPv6 地址由8组16进制的数字来表示，每组表示 16 比特。这些组数字通过 (&amp;quot;:&amp;quot;)分割。比如, 2001:0db8:85a3:0000:0000:8a2e:0370:7334 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以， 2001:db8:85a3:0:0:8A2E:0370:7334 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。&lt;/p>
&lt;p>然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。 比如， 2001:0db8:85a3::8A2E:0370:7334 是无效的 IPv6 地址。
同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如， 02001:0db8:85a3:0000:0000:8a2e:0370:7334 是无效的。&lt;/p>
&lt;p>说明: 你可以认为给定的字符串里没有空格或者其他特殊字符。备注:&lt;code>ip地址的类型，可能为IPv4, IPv6, Neither&lt;/code>示例1输入&lt;code>&amp;quot;172.16.254.1&amp;quot;&lt;/code>输出&lt;code>&amp;quot;IPv4&amp;quot; &lt;/code>说明&lt;code>这是一个有效的 IPv4 地址, 所以返回 &amp;quot;IPv4&amp;quot;&lt;/code>示例2输入&lt;code>&amp;quot;2001:0db8:85a3:0:0:8A2E:0370:7334&amp;quot;&lt;/code>输出&lt;code>&amp;quot;IPv6&amp;quot; &lt;/code>说明&lt;code>这是一个有效的 IPv6 地址, 所以返回 &amp;quot;IPv6&amp;quot;&lt;/code>示例3输入&lt;code>&amp;quot;256.256.256.256&amp;quot;&lt;/code>输出&lt;code>&amp;quot;Neither&amp;quot; &lt;/code>说明&lt;code>这个地址既不是 IPv4 也不是 IPv6 地址&lt;/code>&lt;/p>
&lt;p>90&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：0左边必有1的二进制字符串的数量 | 时间限制：2秒 | 内存限制：262144K给定一个整数n，求由“0”字符和“1”字符组成的长度为n的所有字符串中，满足“0”字符的左边必有“1”字符的字符串的数量。由于答案巨大，请对&lt;img src="https://www.nowcoder.com/equation?tex=2%5E%7B29%7D" alt="img">取模备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%202%20%5Ctimes%2010%5E7" alt="img">&lt;code>示例1输入&lt;/code>1&lt;code>输出&lt;/code>1 &lt;code>说明&lt;/code>只有“1”满足&lt;code>示例2输入&lt;/code>2&lt;code>输出&lt;/code>2 &lt;code>说明&lt;/code>只有“10”和“11”满足&lt;code>示例3输入&lt;/code>3&lt;code>输出&lt;/code>3 &lt;code>说明&lt;/code>只有“101”，“110”，“111”满足`&lt;/p>
&lt;p>91&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：公式字符串求值 | 时间限制：2秒 | 内存限制：262144K给定一个字符串str，str表示一个公式，公式里可以有整数，加减乘除和左右括号，返回公式的计算结果（注意：题目中所有运算都是整型运算，向下取整,且保证数据合法，不会出现除0等情况）。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr%7C%20%5Cleq%201000" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;48*((70-65)-43)+8*1&amp;quot;&lt;code>输出&lt;/code>-1816 &lt;code>示例2输入&lt;/code>&amp;quot;3+1*4&amp;quot;&lt;code>输出&lt;/code>7 `&lt;/p>
&lt;p>92&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：分糖果问题 | 时间限制：2秒 | 内存限制：262144K一群孩子做游戏，现在请你根据游戏得分来发糖果，要求如下：
\1. 每个孩子不管得分多少，起码分到一个糖果。
\2. 任意两个相邻的孩子之间，得分较多的孩子必须拿多一些糖果。(若相同则无此限制)
给定一个数组arr代表得分数组，请返回最少需要多少糖果。
[要求]
时间复杂度为On, 空间复杂度为O1备注: &lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20N%20%5Cleq%2010%5E5" alt="img">&lt;img src="https://www.nowcoder.com/equation?tex=0%20%5Cleq%20arr_i%20%5Cleq%2010%5E5" alt="img">&lt;code>示例1输入&lt;/code>[1,1,2]&lt;code>输出&lt;/code>4 &lt;code>说明&lt;/code>最优分配方案为1, 1，2&lt;/p>
&lt;p>93&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：添加最少的字符让字符串变成回文串（2） | 时间限制：2秒 | 内存限制：262144K给定一个字符串str，再给定str的最长回文子序列字符串strlps, 请返回在添加字符最少的情况下，让str整体都是回文字符串的一种结果。进阶问题比原问题多了一个参数，请做到时间复杂度比原问题的实现低。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr%7C%20%5Cleq%205000" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;A1B21C&amp;quot;,&amp;quot;121&amp;quot;&lt;code>输出&lt;/code>&amp;quot;AC1B2B1CA&amp;quot; `&lt;/p>
&lt;p>94&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：排序 | 时间限制：1秒 | 内存限制：262144K给定一个数组，请你编写一个函数，返回该数组排序后的形式。备注: 数组的长度不大于100000，数组中每个数的绝对值不超过 &lt;img src="https://www.nowcoder.com/equation?tex=10%5E9" alt="img"> 示例1输入&lt;code>[5,2,3,1,4]&lt;/code>输出&lt;code>[1,2,3,4,5] &lt;/code>示例2输入&lt;code>[5,1,6,2,5]&lt;/code>输出&lt;code>[1,2,5,5,6] &lt;/code>&lt;/p>
&lt;p>95&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：添加最少的字符让字符串变为回文字符串（1） | 时间限制：2秒 | 内存限制：262144K给定一个字符串str，如果可以在str的任意位置添加字符，请返回在添加字符最少的情况下，让str整体都是回文字符串的一种结果。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%205000" alt="img">&lt;code>示例1输入&lt;/code>&amp;quot;ABA&amp;quot;&lt;code>输出&lt;/code>&amp;quot;ABA&amp;quot; &lt;code>示例2输入&lt;/code>&amp;quot;AB&amp;quot;&lt;code>输出&lt;/code>&amp;quot;ABA&amp;quot; `&lt;/p>
&lt;p>96&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：丢棋子问题 | 时间限制：1秒 | 内存限制：262144K
一座大楼有&lt;img src="https://www.nowcoder.com/equation?tex=0%E2%88%BCN%5C" alt="img">层，地面算作第0层，最高的一层为第 &lt;img src="https://www.nowcoder.com/equation?tex=N%5C" alt="img">层。已知棋子从第0层掉落肯定不会摔碎，从第&lt;img src="https://www.nowcoder.com/equation?tex=i%5C" alt="img">层掉落可能会摔碎，也可能不会摔碎&lt;img src="https://www.nowcoder.com/equation?tex=(1%E2%A9%BDi%E2%A9%BDN)%5C" alt="img">。给定整数&lt;img src="https://www.nowcoder.com/equation?tex=N%5C" alt="img">作为楼层数，再给定整数&lt;img src="https://www.nowcoder.com/equation?tex=K%5C" alt="img">作为棋子数，返回如果想找到棋子不会摔碎的最高层数，即使在最差的情况下扔的最小次数。一次只能扔一个棋子。&lt;/p>
&lt;p>备注:&lt;img src="https://www.nowcoder.com/equation?tex=0%E2%89%A4N%2CK%E2%89%A410%5E6" alt="img">&lt;code>示例1输入&lt;/code>10,1&lt;code>输出&lt;/code>10 &lt;code>说明&lt;/code>因为只有1棵棋子，所以不得不从第1层开始一直试到第10层，在最差的情况下，即第10层是不会摔坏的最高层，最少也要扔10次 &lt;code>示例2输入&lt;/code>3,2&lt;code>输出&lt;/code>2 &lt;code>说明&lt;/code>先在2层扔1棵棋子，如果碎了，试第1层，如果没碎，试第3层 &lt;code>示例3输入&lt;/code>105,2&lt;code>输出&lt;/code>14 &lt;code>说明&lt;/code>第一个棋子先在14层扔，碎了则用仅存的一个棋子试1~13层若没碎，第一个棋子继续在27层扔，碎了则用仅存的一个棋子试15~26层若没碎，第一个棋子继续在39层扔，碎了则用仅存的一个棋子试28~38层若没碎，第一个棋子继续在50层扔，碎了则用仅存的一个棋子试40~49层若没碎，第一个棋子继续在60层扔，碎了则用仅存的一个棋子试51~59层若没碎，第一个棋子继续在69层扔，碎了则用仅存的一个棋子试61~68层若没碎，第一个棋子继续在77层扔，碎了则用仅存的一个棋子试70~76层若没碎，第一个棋子继续在84层扔，碎了则用仅存的一个棋子试78~83层若没碎，第一个棋子继续在90层扔，碎了则用仅存的一个棋子试85~89层若没碎，第一个棋子继续在95层扔，碎了则用仅存的一个棋子试91~94层若没碎，第一个棋子继续在99层扔，碎了则用仅存的一个棋子试96~98层若没碎，第一个棋子继续在102层扔，碎了则用仅存的一个棋子试100、101层若没碎，第一个棋子继续在104层扔，碎了则用仅存的一个棋子试103层若没碎，第一个棋子继续在105层扔，若到这一步还没碎，那么105便是结果 `&lt;/p>
&lt;p>97&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：字符串匹配问题 | 时间限制：2秒 | 内存限制：262144K对于字符串str，其中绝对不含有字符’.’和‘&lt;em>’&lt;/em>。&lt;em>再给定字符串exp，其中可以含有’.’或’‘&lt;/em>’，’&lt;em>’字符不能是exp的首字符，并且任意两个’&lt;/em>‘字符不相邻。exp中的’.’代表任何一个字符，exp中的’**’表示’*‘&lt;em>的前一个字符可以有0个或者多个。请写一个函数，判断str是否能被exp匹配(注意：输入的数据不保证合法，但只含小写字母和‘.’和‘&lt;/em>’)。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr%7C%2C%20%7Cexp%7C%20%5Cleq%20300" alt="img">示例1输入&lt;code>&amp;quot;abc&amp;quot;,&amp;quot;abc&amp;quot;&lt;/code>输出&lt;code>true &lt;/code>&lt;/p>
&lt;p>98&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：最短包含字符串的长度 | 时间限制：2秒 | 内存限制：262144K给定字符串str1和str2，求str1的字串中含有str2所有字符的最小字符串长度，如果不存在请输出0。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr1%7C%20%2C%20%7Cstr2%7C%20%5Cleq%2010%5E5" alt="img">示例1输入&lt;code>&amp;quot;abcde&amp;quot;,&amp;quot;ac&amp;quot;&lt;/code>输出&lt;code>3 &lt;/code>说明&lt;code>“abc”中包含“ac”，且“abc”是所有满足条件中最小的。&lt;/code>&lt;/p>
&lt;p>99&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：找到指定类型的新类型字符 | 时间限制：2秒 | 内存限制：262144K新类型字符的定义如下:
1.新类型字符是长度为1或者2的字符串。
\2. 表现形式可以仅是小写字母，例如，&amp;quot;e&amp;quot;; 也可以是大写字母+小写字母，例如，&amp;quot;Ab&amp;quot;;还可以是大写字母+大写字母，例如，&amp;quot;DC&amp;quot;。
现在给定一个字符串str, str 一定是若干新类型字符 正确组合的结果。比如&amp;quot;eaCCBi&amp;quot;，由新类型字符&amp;quot;e&amp;quot;、&amp;quot;a”、&amp;quot;CC&amp;quot;和&amp;quot;Bi&amp;quot;拼成。 再给定一个整数k，代表str中的位置。请返回第k个位置的新类型字符。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstr%7C%20%5Cleq%2010%5E5" alt="img">示例1输入&lt;code>&amp;quot;aaABCDEcBCg&amp;quot;,7&lt;/code>输出&lt;code>&amp;quot;Ec&amp;quot; &lt;/code>&lt;/p>
&lt;p>100&lt;/p>
&lt;p>完善核心代码 语言限制 【10分】 标题：拼接所有的字符串产生字典序最小的字符串 | 时间限制：2秒 | 内存限制：262144K给定一个字符串的数组strs，请找到一种拼接顺序，使得所有的字符串拼接起来组成的字符串是所有可能性中字典序最小的，并返回这个字符串。备注:&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20n%20%5Cleq%2010%5E5" alt="img">&lt;/p>
&lt;p>&lt;img src="https://www.nowcoder.com/equation?tex=1%20%5Cleq%20%7Cstrs_i%7C%20%5Cleq%2010" alt="img">示例1输入&lt;code>[&amp;quot;abc&amp;quot;,&amp;quot;de&amp;quot;]&lt;/code>输出&lt;code>&amp;quot;abcde&amp;quot;&lt;/code>&lt;/p></content><category scheme="https://xs-cw.github.io/categories/%E9%9D%A2%E8%AF%95/" term="面试" label="面试"/><category scheme="https://xs-cw.github.io/tags/%E9%9D%A2%E8%AF%95/" term="面试" label="面试"/></entry><entry><title type="text">面试题2</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/interview_case2/"/><id>https://xs-cw.github.io/posts/interview_case2/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-05-05T22:05:31+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">单选题 【2分】 在MySql中，如果要修改表的列名，下列语句的语法正确的是 1 2 3 4 AA……</summary><content type="html">&lt;h2 id="单选题">单选题&lt;/h2>
&lt;ol>
&lt;li>【2分】 在MySql中，如果要修改表的列名，下列语句的语法正确的是&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="n">AALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名字&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CHANGE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">列名称&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">新列名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">BALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名字&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">列名称&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">新列名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">CALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名字&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">MODIFY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">列名称&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">新列名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="n">DALTER&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">TABLE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">表名字&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">列名称&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">新列名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>正确答案：A&lt;/p>
&lt;ol start="2">
&lt;li>【2分】 数据库事务的特性不包括以下哪一项？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A原子性
B分区容错性
C一致性
D隔离性
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>【2分】 下列代码中三个变量x, y, z的内存位置分别是:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c"> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">iostream&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="n">using&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">z&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A数据段，栈，堆；
B栈，数据段，堆；
CBSS段，栈，栈；
D数据段，栈，栈;
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;h6 id="参考答案">参考答案：&lt;/h6>
&lt;p>x是被初始化的全局变量位于数据段，y位于栈中，z是指针变量，也位于栈中；&lt;/p>
&lt;ol start="4">
&lt;li>【2分】 对任意实数c，从有N个无序元素的数组中寻找元素a、b，使得 a+b 的结果最接近c，最快的平均时间复杂度是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AO(N^2)
BO(log N)
CO(N)
DO(N^3)
EO(NLogN)
F不确定
&lt;/code>&lt;/pre>&lt;p>正确答案：E&lt;/p>
&lt;h4 id="参考答案-1">参考答案：&lt;/h4>
&lt;p>2sum问题，稍微改了改让google直接搜不到&lt;/p>
&lt;ol start="5">
&lt;li>【2分】 如果 22, 24, 26, 14, 16, 18, 46, 8, 10 是第二次排序后的结果，以下哪种排序算法可以满足？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A冒泡排序
B插入排序
C选择排序
D快速排序
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="6">
&lt;li>【2分】以下情况对性能影响由大到小排列，最接近的选项是？
A.分支预测失败 B.L1 Cache 失效
C.IO等待 D.虚拟内存page miss&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AA &amp;gt; B &amp;gt; C &amp;gt; D
BC &amp;gt; B &amp;gt; D &amp;gt; A
CD &amp;gt; A &amp;gt; C &amp;gt; B
DD &amp;gt; B &amp;gt; C &amp;gt; A
EA &amp;gt; C &amp;gt; D &amp;gt; B
FB &amp;gt; D &amp;gt; A &amp;gt; C
GC &amp;gt; D &amp;gt; B &amp;gt; A
&lt;/code>&lt;/pre>&lt;p>正确答案：G&lt;/p>
&lt;ol start="7">
&lt;li>【2分】 ctrl + c 会给前台进程组中的进程发送什么信号？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ASIGINT
BSIGTSTP
CSIGQUIT
DSIGTERM
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;h4 id="参考答案-2">参考答案：&lt;/h4>
&lt;p>Linux信号机制&lt;/p>
&lt;ol start="8">
&lt;li>【2分】 在区间[-2, 2]里任取两个实数，它们的和&amp;gt;1的概率是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A3/8
B3/16
C9/32
D9/64
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;h4 id="参考答案-3">参考答案：&lt;/h4>
&lt;p>作图可解&lt;/p>
&lt;ol start="9">
&lt;li>【2分】 假设一共1000瓶酒，其中一瓶有毒。如果一只老鼠喝了有毒的酒，会在一天之后死亡，那么给你一天时间，需要你判定哪瓶酒有毒，至少需要几只老鼠？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A5
B10
C20
D100
E500
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="10">
&lt;li>【2分】以下关于 linux 文件系统说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A/proc是真实存在于磁盘上的目录
B/dev/null和/dev/zero是一个特殊的设备文件，并不会存在于磁盘上
C/sys是sysfs文件系统挂载的标准位置
Dcgroups系统通过读写文件与其交互
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="11">
&lt;li>【2分】如果由于某些原因需要查看多进程运行时的所有系统调用，可以使用什么命令&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Aptrace
Bstrace -f
Cstrace
Dptrace -f
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="12">
&lt;li>【2分】已知字符串S为”abaabaabacacaabaabcc”，模式串t为”abaabc”。采用KMP算法进行匹配，第一次出现“失配”（s[i]!=t[j]）时，i=j=5，则下次开始匹配时，i和j的值分别是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Ai=1 j=0
Bi=5 j=0
Ci=5 j=2
Di=6 j=2
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="13">
&lt;li>【2分】假设初始栈为空，在对中缀表达式 a/b+(c&lt;em>d-e&lt;/em>f)/g 转化为后缀表达式的过程中，当扫描到 f 时，栈中元素依次是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A+ ( * -
B+ ( - *
C/ + ( * - *
D/ + - *
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="14">
&lt;li>【2分】用哈希算法处理冲突时可能出现堆积现象，会受堆积直接影响的是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A 储存效率
B散列函数
C装载因子
D平均查找长度
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="15">
&lt;li>【2分】关于最小生成树的说法中，正确的是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A最小生成树代价唯一
B所有权值最小的边一定会出现在所有最小生成树中
C使用Prim算法从不同顶点开始得到的最小生成树一定相同
D使用Prim算法与Kruskal算法得到的最小生成树总不相同
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="16">
&lt;li>【2分】关于内存分配说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A分页与分段都能达到地址隔离的效果
B硬件中的TLB，帮助操作系统快速从虚拟地址定位到物理地址
C如果TLB无法命中，则CPU或者操作系统会遍历分页表
D操作系统运行时，程序获取的变量的内存地址是真实的物理地址
&lt;/code>&lt;/pre>&lt;p>正确答案：D&lt;/p>
&lt;ol start="17">
&lt;li>【2分】关于 inode 以下说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Ainode的数量是有限的
Binode信息中有一项叫做&amp;quot;链接数&amp;quot;，软链接会修改链接数
C不同名称的文件有可能对应相同的inode
D如果inode被使用完，则会导致无法创建文件
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="18">
&lt;li>【2分】关于进程间通讯说法错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A匿名管道只能用于父子进程间单向通讯
B 命名管道实际是创建了一个管道文件
C信号量只能用于父子进程间通讯与同步
Dsocket通讯可以跨主机通讯
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="19">
&lt;li>【2分】关于 linux 中进程状态叙述错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A处于D（TASK_UNINTERRUPTIBLE）状态的进程在状态改变前不能接受任何信号，也无法被强制退出
B处于Z（EXIT_ZOMBIE）状态的进程产生的原因是因为其父进程未收集其退出状态
C处于R（TASK_RUNNING）状态的进程不可能处于就绪状态
D处于S（TASK_INTERRUPTIBLE）状态的进程可能是正在等待IO事件
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;p>20.【2分】linux 中如果希望让内核跟踪数据包在iptables内的处理过程，可以在哪个表中加入相关规则&lt;/p>
&lt;pre>&lt;code>Araw
Bnat
Cfilter
Dmangle
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;ol start="21">
&lt;li>【2分】关于 HTTP 协议说法中错误的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AHTTP协议是无状态协议
BHTTP/1.0中已经支持KeepAlive
CHTTP/2协议支持多路复用与首部压缩
DHTTP/3将会使用UDP来传输数据
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="22">
&lt;li>【2分】关于路由跟踪错误的是（请考虑任意平台中任意可用于做路由跟踪的软件）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ATCP与UDP协议也可用来做路由跟踪
B如果使用ICMP协议做路由跟踪，需要指定目目标端口
Clinux下做路由跟踪的软件包括traceroute和mtr
D如果使用TCP协议做路由跟踪，目标主机不一定能有回应
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="23">
&lt;li>【2分】关于 TCP 连接中拥塞控制中，正确的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A拥塞窗口的大小，在首次出现丢包时一直是指数增长
B 快重传输算法中，如果发送方收到三个重复确认就应当立即重传对方尚未收到的报文段
C快重传算法触发后，快恢复不一定触发
D快重传算法触发后，慢启动阈值根据原慢启动阈值进行改变
&lt;/code>&lt;/pre>&lt;p>正确答案：B&lt;/p>
&lt;ol start="24">
&lt;li>【2分】下列关于 http 状态码描述正确的是（）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A404读取浏览器缓存，502错误网关
B404找不到资源，403服务器错误
C500服务器错误，304读取浏览器缓存
D304服务器错误，200请求成功
E500找不到资源，200请求成功
&lt;/code>&lt;/pre>&lt;p>正确答案：C&lt;/p>
&lt;ol start="25">
&lt;li>【2分】&lt;img src="https://uploadfiles.nowcoder.com/images/20161128/5918115_1480305264548_D7D3C8CC72BCD7C6F4E46095FAA5BD6D" alt="img">&lt;/li>
&lt;/ol>
&lt;p>以上 javascript 代码，在浏览器中运行的结果是&lt;/p>
&lt;pre>&lt;code>A1 2 3
Bundefined 2 1
C报错
D1 2 1
&lt;/code>&lt;/pre>&lt;p>正确答案：A&lt;/p>
&lt;h2 id="不定项选择题">不定项选择题&lt;/h2>
&lt;ol>
&lt;li>【3分】一台动态获取IP的服务器，开机后联网完成自动检查系统更新的过程中，可能用到的协议是？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A
DHCP
B
DNS
C
NTP
D
ARP
E
ICMP
F
BGP
G
TCP
&lt;/code>&lt;/pre>&lt;p>正确答案：A、B、C、D、G&lt;/p>
&lt;ol start="2">
&lt;li>【3分】 下列关于网络编程正确的是&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A
TCP主动关闭的一端会出现 TIME_WAIT状态
B服务端编程会调用 listen(),客户端也可以调用 bind()
C
TCP 建立和关闭连接都只需要1.5个RTT
DLinux 通过提供提供 socket 接口来进行网络编程
E长连接相对短连接可以节省建立连接的时间
F
UDP传输有简单的流控制
&lt;/code>&lt;/pre>&lt;p>正确答案：A、B、D、E&lt;/p>
&lt;ol start="3">
&lt;li>【3分】 下列正则表达式不能匹配”&lt;a href="http://www.innotechx.com/">www.innotechx.com&lt;/a>”的是：&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A^w+.w+.w+$
B[w]{0,3}.[a-z]*.[a-z]+
C^w.*com$
D[w]{3}.[a-z]{11}.[a-z]
&lt;/code>&lt;/pre>&lt;p>正确答案：A、D&lt;/p>
&lt;ol start="4">
&lt;li>【3分】 以下有关Http协议的描述中，正确的有？&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Apost请求一般用于修改服务器上的资源，对发送的消息数据量没有限制，通过表单方式提交
BHTTP返回码302表示永久重定向，需要重新URI
C可以通过206返回码实现断点续传
DHTTP1.1实现了持久连接和管线化操作以及主动通知功能，相比http1.0有大福性能提升
&lt;/code>&lt;/pre>&lt;p>正确答案：A、C、D&lt;/p>
&lt;ol start="5">
&lt;li>【3分】在掩码为 255.255.224.0 条件下，下面哪些 ip 地址属于同一网段（）&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>A192.168.235.25
B192.168.188.99
C192.168.246.187
D192.168.67.28
&lt;/code>&lt;/pre>&lt;p>正确答案：A、C&lt;/p>
&lt;h2 id="问答题">问答题&lt;/h2>
&lt;ol>
&lt;li>【5分】以下这段代码是否存在问题？如有请纠正，并指出问题如没有，则程序的输出是？&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">wg&lt;/span> &lt;span class="nx">sync&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WaitGroup&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">go&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Done&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">wg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Wait&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">()&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>【20分】
设计一个工具，可以监控任意长度的网站列表的存活状态，并输出相关信息。
要求：
1.使用golang实现。
2.数据每次刷新后控制台都必须输出新数据数据刷新时间间隔、监控网站列表必须可以热重载
3.如有关字段数据无法获取，可直接返回nil或显示&amp;quot;nil&amp;quot;访问监控站点时，status code为20x即可判断为存活，其他为死亡。（遇到跳转需要跟随跳转）
4.IP不要求能获取到源站IP，CDN IP也符合要求
5.相关API示例:
1.IP Geolocation: &lt;a href="https://ipwhois.io/documentation,">https://ipwhois.io/documentation,&lt;/a> &lt;a href="https://ipapi.co/#api">https://ipapi.co/#api&lt;/a>
2.Weather: &lt;a href="https://www.metaweather.com/api/">https://www.metaweather.com/api/&lt;/a>
运行：&lt;code>./m &amp;lt;configuration file&amp;gt;&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>控制台输出:&lt;/p>
&lt;pre>&lt;code>Data refresh interval: 60s
Website IP Country Region City Temperature WeatherState Request Cost Time Status
www.youtube.com 172.217.160.78 Singapore Singapore Singapore 29.71 Heavy Rain 1.5s (Alive/Dead)
Data refresh at: 1970-01-01 00:00:00
Data refresh cost time: 0.001s
============================================================
http请求输出：curl http://xx:yy/zz | python -m json.tool
{
&amp;quot;data&amp;quot;: [
{
&amp;quot;website&amp;quot;: &amp;quot;www.youtube.com&amp;quot;,
&amp;quot;ip&amp;quot;: &amp;quot;172.217.160.78&amp;quot;,
&amp;quot;country&amp;quot;: &amp;quot;Singapore&amp;quot;,
&amp;quot;region&amp;quot;: &amp;quot;Central Singapore&amp;quot;,
&amp;quot;city&amp;quot;: &amp;quot;Singapore&amp;quot;,
&amp;quot;temperature&amp;quot;: 29.71,
&amp;quot;weatherState&amp;quot;: &amp;quot;Heavy Rain&amp;quot;,
&amp;quot;requestCostTime&amp;quot;: 1.5,
&amp;quot;alive&amp;quot;: true
}
],
&amp;quot;dataRefreshInterval&amp;quot;: 60,
&amp;quot;lastRefreshAt&amp;quot;: &amp;quot;1970-01-01 00:00:00&amp;quot;
}
&lt;/code>&lt;/pre>&lt;h2 id="编程题">编程题&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>ACM编程题 【10分】 标题：整数与IP地址间的转换 | 时间限制：1秒 | 内存限制：32768K原理：ip地址的每段可以看成是一个0-255的整数，把每段拆分成一个二进制形式组合起来，然后把这个二进制数转变成一个长整数。
举例：一个ip地址为10.0.3.193
每段数字 相对应的二进制数
10 00001010
0 00000000
3 00000011
193 11000001
组合起来即为：00001010 00000000 00000011 11000001,转换为10进制数就是：167773121，即该IP地址转换后的数字就是它了。 每段可以看成是一个0-255的整数，需要对IP地址进行校验&lt;/p>
&lt;p>&lt;strong>输入描述:&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>输入&lt;/p>
&lt;p>1 输入IP地址&lt;/p>
&lt;p>2 输入10进制型的IP地址&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>输出描述:&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>输出
1 输出转换成10进制的IP地址
2 输出转换后的IP地址
&lt;strong>示例1&lt;/strong>
输入10.0.3.193 167969729
输出167773121 10.3.3.193&lt;/p>
&lt;/blockquote></content><category scheme="https://xs-cw.github.io/categories/%E9%9D%A2%E8%AF%95/" term="面试" label="面试"/><category scheme="https://xs-cw.github.io/tags/%E9%9D%A2%E8%AF%95/" term="面试" label="面试"/></entry><entry><title type="text">Questions</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/questions/"/><id>https://xs-cw.github.io/posts/questions/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-04-07T10:42:49+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">乐观锁悲观锁 https://juejin.im/post/5b4977ae5188251b146b2fc8 docker相关 docker实现原理:linux namespace技术……</summary><content type="html">&lt;ol>
&lt;li>
&lt;h3 id="乐观锁悲观锁">乐观锁悲观锁&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://juejin.im/post/5b4977ae5188251b146b2fc8">https://juejin.im/post/5b4977ae5188251b146b2fc8&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="docker相关">docker相关&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>docker实现原理:linux namespace技术&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/lixiao0320/article/details/94348042">https://blog.csdn.net/lixiao0320/article/details/94348042&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="redis数据结构">redis数据结构&lt;/h3>
&lt;ul>
&lt;li>数据结构有:
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型常量&lt;/th>
&lt;th>对象的名称&lt;/th>
&lt;th>编码格式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>REDIS_STRING&lt;/td>
&lt;td>字符串&lt;/td>
&lt;td>int、raw或者embstr&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REDIS_LIST&lt;/td>
&lt;td>列表&lt;/td>
&lt;td>ziplist或者linkedlist&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REDIS_HASH&lt;/td>
&lt;td>哈希&lt;/td>
&lt;td>ziplist或者hashtable(hashtable是由dict结构实现)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REDIS_SET&lt;/td>
&lt;td>集合&lt;/td>
&lt;td>intset或者hashtable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REDIS_ZSET&lt;/td>
&lt;td>有序集合&lt;/td>
&lt;td>ziplist，或者是skiplist与dict结合体&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>底层实现
&lt;a href="https://blog.csdn.net/wcf373722432/article/details/78678504">https://blog.csdn.net/wcf373722432/article/details/78678504&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="redis为什么比mysql快">redis为什么比mysql快&lt;/h3>
&lt;ul>
&lt;li>redis存储在内存中,mysql磁盘&lt;/li>
&lt;li>redis使用K-V存储,mysql使用B+tree&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="消息队列">消息队列&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="微服务">微服务&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>服务发现&lt;/p>
&lt;p>go-micro,consul工具; zookeeper,k8s&lt;/p>
&lt;/li>
&lt;li>
&lt;p>负载均衡&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/yang731227/article/details/90637535">https://blog.csdn.net/yang731227/article/details/90637535&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="微服务有什么优点">微服务有什么优点？&lt;/h3>
&lt;ul>
&lt;li>解耦——系统中的服务在很大程度上是解耦的。因此，整个应用程序可以很容易地构建、修改和伸缩&lt;/li>
&lt;li>组件化——微服务被视为独立的组件，可以很容易地替换和升级&lt;/li>
&lt;li>业务功能——微服务非常简单，只关注一个功能&lt;/li>
&lt;li>自治——开发人员和团队可以彼此独立工作，从而提高速度&lt;/li>
&lt;li>持续交付——通过软件创建、测试和批准的系统自动化，允许频繁地发布软件&lt;/li>
&lt;li>责任——微服务不关注应用程序作为项目。相反，他们将应用程序视为自己负责的产品&lt;/li>
&lt;li>分散治理——重点是为正确的工作使用正确的工具。这意味着没有标准化的模式或任何技术模式。开发人员可以自由选择最有用的工具来解决他们的问题&lt;/li>
&lt;li>敏捷——微服务支持敏捷开发。任何新特性都可以快速开发并再次丢弃&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="redis缓存数据一致性">redis缓存数据一致性&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://blog.csdn.net/koli6678/article/details/88202245">https://blog.csdn.net/koli6678/article/details/88202245&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="redis-缓存穿透">redis 缓存穿透&lt;/h3>
&lt;ul>
&lt;li>不存在的结果也进行缓存,或者采用布隆过滤拦截不存在结果的请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="缓存雪崩">缓存雪崩&lt;/h3>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>加锁或者使用队列约束请求&lt;/li>
&lt;li>过期时间设置一个随机偏量,避免同时失效&lt;/li>
&lt;/ul>
&lt;ol start="11">
&lt;li>
&lt;h3 id="缓存击穿">缓存击穿&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方案&lt;/th>
&lt;th>优点&lt;/th>
&lt;th style="text-align:left">缺点&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>简单分布式互斥锁（mutex key)&lt;/td>
&lt;td>1. 思路简单 2. 保证一致性&lt;/td>
&lt;td style="text-align:left">1.代码复杂度增大 2.存在死锁的风险 3. 存在线程池阻塞的风险&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>“提前”使用互斥锁&lt;/td>
&lt;td>1. 保证一致性&lt;/td>
&lt;td style="text-align:left">同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;quot;永不过期&amp;quot;&lt;/td>
&lt;td>1. 异步构建缓存，不会阻塞线程池&lt;/td>
&lt;td style="text-align:left">1. 不保证一致性。2. 代码复杂度增大(每个value都要维护一个timekey)。 3. 占用一定的内存空间(每个value都要维护一个timekey)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>netflix资源隔离组件hystrix&lt;/td>
&lt;td>1. hystrix技术成熟，有效保证后端。2. hystrix监控强大。&lt;/td>
&lt;td style="text-align:left">1. 部分访问存在降级策略。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;li>
&lt;h3 id="channel-底层实现线程安全">channel 底层实现线程安全&lt;/h3>
&lt;ul>
&lt;li>加锁&lt;/li>
&lt;li>关闭通道时会广播到所有&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="sync-map-区别">sync map 区别&lt;/h3>
&lt;ul>
&lt;li>加锁&lt;/li>
&lt;li>适合大量读,小量写&lt;/li>
&lt;li>tips:第三方优化的 &lt;a href="https://github.com/orcaman/concurrent-map">concurrent-map&lt;/a>(想一想，mysql加锁，是不是有表级锁、行级锁，前文的sync.RWMutex加锁方式相当于表级锁。
而sync.Map其实也是相当于表级锁，只不过多读写分了两个map，本质还是一样的。
既然这样，那就自然知道优化方向了：就是把锁的粒度尽可能降低来提高运行速度。
思路：对一个大map进行hash，其内部是n个小map，根据key来来hash确定在具体的那个小map中，这样加锁的粒度就变成1/n了。
网上找了下，真有大佬实现了)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="context-超时">context 超时&lt;/h3>
&lt;ul>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="登录过程修改角色">登录过程修改角色&lt;/h3>
&lt;ul>
&lt;li>session消息&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="token与jwt比较">token与jwt比较&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="登录持久化">登录持久化&lt;/h3>
&lt;ul>
&lt;li>登录信息加密写入cookie&lt;/li>
&lt;li>oatht2 验证&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="go的前期版本bug">go的前期版本bug&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="go-相关问题">go 相关问题&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://talkgo.org/interview/interview-golang-language/">go面试题&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://studygolang.com/articles/11535">nil的相关理解&lt;/a> &lt;a href="https://play.yeyuqiu.com/p/3UV3wfPWoim">PLAY&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">
&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;unsafe&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// nil的零值
&lt;/span>&lt;span class="c1">// nil没有默认的类型，尽管它是多个类型的零值，必须显式或隐式指定每个nil用法的明确类型
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 明确.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kd">struct&lt;/span>&lt;span class="p">{})(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="nb">bool&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="nb">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">func&lt;/span>&lt;span class="p">())(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">_&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{}(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 隐式.
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="c1">// nil的类型
&lt;/span>&lt;span class="c1">// nil类型的所有值的内存布局始终相同,换一句话说就是：不同类型nil的内存地址是一样的。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">ptr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">sl&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%p\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//0x0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%p\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ptr&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">//0x0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%p\n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">sl&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">//0x0
&lt;/span>&lt;span class="c1">// nil值的大小始终与其类型与nil值相同的non-nil值大小相同。因此, 表示不同零值的nil标识符可能具有不同的大小。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 以下打印结果为64位体系
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">// 24
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">// 8
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">// 16
&lt;/span>&lt;span class="c1">// nil 值比较
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 1.不同类型的nil是不能比较的
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;span class="kd">var&lt;/span> &lt;span class="nx">ptr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">ptr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//invalid operation: m == ptr (mismatched types map[int]string and *int)
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 2.有两个情形例外: 两个值之一的类型是另一个的基础类型。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//两个值之一的类型实现了另一个值的类型 (必须是接口类型)。
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">type&lt;/span> &lt;span class="nx">IntPtr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">IntPtr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{})(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">//false
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="go框架-路由">go框架 路由&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="订单高并发--超卖">订单高并发 超卖&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>超卖问题&lt;/p>
&lt;p>&lt;a href="https://juejin.im/post/5dbeb66f51882524a33b9135">https://juejin.im/post/5dbeb66f51882524a33b9135&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>超时实现&lt;/p>
&lt;p>轮询数据库,时间轮,redis ,消息队列&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="ws连接数过高">ws连接数过高&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="k8s">k8s&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="最近项目">最近项目&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="常见排序时间复杂度">常见排序时间复杂度&lt;/h3>
&lt;/li>
&lt;li>
&lt;h3 id="mysql">mysql&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>事务隔离&lt;/p>
&lt;/li>
&lt;li>
&lt;p>慢查询&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引优化 索引的数据结构&lt;/p>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/news/362898">https://cloud.tencent.com/developer/news/362898&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filesort&lt;/p>
&lt;p>不能使用索引排序时,会使用文件排序,比较慢的外部查询,尽量避免&lt;/p>
&lt;/li>
&lt;li>
&lt;p>B+tree&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/tiancai/p/9024351.html">为什么mysql使用B+树&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="mongodb">Mongodb&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>mongodb索引&lt;/p>
&lt;p>通常采用类似btree的结构持久化存储，以保证从索引里快速&lt;code>O(logN)的时间复杂度&lt;/code>&lt;/p>
&lt;p>MongoDB支持多种类型的索引，包括单字段索引、复合索引、多key索引、文本索引等，每种类型的索引有不同的使用场合&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="求数组中两数字之和为指定数字">求数组中两数字之和为指定数字&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>双循环遍历&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字典法: 将差值作为key,下标作为value,遍历数组查询&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go"> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">nums&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">N&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">i&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="踩过的坑">踩过的坑&lt;/h3>
&lt;ul>
&lt;li>for range 数组长度固定,range到的值会有一次复制过程&lt;/li>
&lt;li>sync.Pool 被gc会被直接回收掉，所以不适合存放有状态的内容，只适合状态无关的临时数据,gin框架中存储context对象&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;ul>
&lt;li>select、poll、epoll 的区别&lt;a href="https://segmentfault.com/a/1190000003063859">详见Linux IO模式&lt;/a>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>select&lt;/strong> 有数量限制,可以通过宏修改,但是性能会更低&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>poll&lt;/strong> 没有数量限制,监控文件数过多也会性能变低&lt;/p>
&lt;blockquote>
&lt;p>select和poll都需要在返回后，&lt;code>通过遍历文件描述符来获取已经就绪的socket&lt;/code>。事实上，同时连 接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>epoll&lt;/strong> 增强版的select和poll,更灵活,使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。&lt;/p>
&lt;p>操作过程需要如下三个接口:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">int&lt;/span> &lt;span class="nf">epoll_create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="c1">//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大,只是一个建议值
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">epoll_ctl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">epoll_event&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="err">；&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">epoll_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">epoll_event&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxevents&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">timeout&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>epoll工作模式: &lt;strong>LT(level trigger)&lt;/strong> ,&lt;strong>ET(edge trigger)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>LT模式&lt;/strong>(默认)：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，&lt;code>应用程序可以不立即处理该事件&lt;/code>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。&lt;code>同时支持block和no-block socket&lt;/code>&lt;/li>
&lt;li>&lt;strong>ET模式&lt;/strong>(高性能)：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，&lt;code>应用程序必须立即处理该事件&lt;/code>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。&lt;code>只支持no-block socket&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;h3 id="其他问题">其他问题&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>mysql 隔离级别&lt;/p>
&lt;p>&lt;a href="https://www.cnblogs.com/jian-gao/p/10795407.html">https://www.cnblogs.com/jian-gao/p/10795407.html&lt;/a>&lt;/p>
&lt;p>&lt;strong>Mysql的四种隔离级别&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Read Uncommitted（读取未提交内容）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Read Committed（读取提交内容）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Repeatable Read（可重读）&lt;/strong>(数据库默认级别)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Serializable（可串行化）&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>隔离级别&lt;/th>
&lt;th>脏读&lt;/th>
&lt;th>不可重复读&lt;/th>
&lt;th>幻读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Read uncommitted&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Read committed&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Repeatable read&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Serializable&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>mvcc 聚集索引和非聚集索引的结构&lt;/p>
&lt;/li>
&lt;li>
&lt;p>redis 底层模型 多路复用&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tcp/ip&lt;/p>
&lt;/li>
&lt;li>
&lt;p>http2和http1的区别&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分布式事务 分布式锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一致性哈希&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ConcurrentHashMap的看法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>docker 网络模式 隔离级别&lt;/p>
&lt;ul>
&lt;li>Bridge contauner 桥接式&lt;/li>
&lt;li>Host(open) container 开放式&lt;/li>
&lt;li>Container(join) container 联合挂载式，是host模式的延伸&lt;/li>
&lt;li>None(Close) container 封闭式网络模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>正在被执行的 goroutine 发生以下情况时让出当前 goroutine 的执行权，并调度后面的 goroutine 执行：&lt;/p>
&lt;ul>
&lt;li>IO 操作&lt;/li>
&lt;li>Channel 阻塞&lt;/li>
&lt;li>system call&lt;/li>
&lt;li>运行较长时间&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>byte转string, 零内存拷贝方法&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;reflect&amp;#34;&lt;/span>
&lt;span class="s">&amp;#34;unsafe&amp;#34;&lt;/span>
&lt;span class="p">)&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">Student&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">Name&lt;/span> &lt;span class="nx">People&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">type&lt;/span> &lt;span class="nx">People&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">X&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;span class="nx">S&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">a&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;aaa&amp;#34;&lt;/span>
&lt;span class="nx">b&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;amp;[97 97 97]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;ccc&amp;#34;&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;amp;[99 99 99]
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">byte&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">98&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">98&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">98&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// bbb
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">s&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">Student&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">People&lt;/span>&lt;span class="p">{&lt;/span>
&lt;span class="nx">X&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;people&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;span class="nx">S&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span>
&lt;span class="p">}}&lt;/span>
&lt;span class="nx">p&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">People&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">unsafe&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Pointer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;amp;{people [1 2]}
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Name&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">X&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;student&amp;#34;&lt;/span>
&lt;span class="nx">log&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;amp;{student [1 2]}
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></content><category scheme="https://xs-cw.github.io/categories/question/" term="question" label="question"/><category scheme="https://xs-cw.github.io/tags/question/" term="question" label="question"/></entry><entry><title type="text">Leetcode63</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/leetcode63/"/><id>https://xs-cw.github.io/posts/leetcode63/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-04-04T12:01:40+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">面试题63. 股票的最大利润 难度中等11收藏分享切换为英文关注反馈 假设把某股票的价格按……</summary><content type="html">&lt;h3 id="面试题63-股票的最大利润">面试题63. 股票的最大利润&lt;/h3>
&lt;p>难度中等11收藏分享切换为英文关注反馈&lt;/p>
&lt;p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？&lt;/p>
&lt;p>&lt;strong>示例 1:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
&lt;/code>&lt;/pre>&lt;p>&lt;strong>示例 2:&lt;/strong>&lt;/p>
&lt;pre>&lt;code>输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
&lt;/code>&lt;/pre>&lt;p>&lt;strong>限制：&lt;/strong>&lt;/p>
&lt;pre>&lt;code>0 &amp;lt;= 数组长度 &amp;lt;= 10^5
&lt;/code>&lt;/pre>&lt;h4 id="思路">思路:&lt;/h4>
&lt;blockquote>
&lt;p>遍历数组,取每天最高利润,遍历完成即是最优解&lt;/p>
&lt;/blockquote>
&lt;h4 id="代码">代码:&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">leet63maxProfit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prices&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 第一天盈利为0
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">win&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="c1">// 第一天亏损为当天价格
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">lose&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="c1">// 当天盈利与目前最高盈利相比
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">win&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">win&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lose&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="c1">// 取最少的亏损
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">lose&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">lose&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">prices&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">win&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kd">func&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">b&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content></entry><entry><title type="text">Leetcode1162</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/leetcode1162/"/><id>https://xs-cw.github.io/posts/leetcode1162/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-04-04T00:43:32+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">1162. 地图分析 你现在手里有一份大小为 N x N 的「地图」（网格） grid，上面的每个「区域」……</summary><content type="html">&lt;h3 id="1162-地图分析">1162. 地图分析&lt;/h3>
&lt;p>你现在手里有一份大小为 N x N 的「地图」（网格） grid，上面的每个「区域」（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，请你找出一个海洋区域，这个海洋区域到离它最近的陆地区域的距离是最大的。&lt;/p>
&lt;p>我们这里说的距离是「曼哈顿距离」（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。&lt;/p>
&lt;p>如果我们的地图上只有陆地或者海洋，请返回 -1。&lt;/p>
&lt;p>示例1:&lt;/p>
&lt;p>&lt;img src="https://xs-cw.github.io/img/1336_ex1.jpeg" alt="img">&lt;/p>
&lt;pre>&lt;code>输入：[[1,0,1],[0,0,0],[1,0,1]]
输出：2
解释：
海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。
&lt;/code>&lt;/pre>&lt;p>&lt;strong>示例 2：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://xs-cw.github.io/img/1336_ex1.jpeg" alt="img">&lt;/p>
&lt;pre>&lt;code>输入：[[1,0,0],[0,0,0],[0,0,0]]
输出：4
解释：
海洋区域 (2, 2) 和所有陆地区域之间的距离都达到最大，最大距离为 4。
&lt;/code>&lt;/pre>&lt;p>&lt;strong>提示：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;code>1 &amp;lt;= grid.length == grid[0].length &amp;lt;= 100&lt;/code>&lt;/li>
&lt;li>&lt;code>grid[i][j]&lt;/code> 不是 &lt;code>0&lt;/code> 就是 &lt;code>1&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="思路">思路&lt;/h3>
&lt;p>筛选到所有陆地,逐个向外(四个方向)遍历一次,并将遍历到的海洋标记为已经遍历,记录下遍历距离,最后遍历到的海洋即是最远位置的,返回此时距离.&lt;/p>
&lt;h3 id="代码">代码&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">maxDistance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">grid&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">land&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nx">length&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">grid&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">// 拓展方向
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="nx">dx&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="nx">dy&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 记录陆地坐标
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">grid&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i2&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">grid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">grid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">i2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">land&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">land&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">i2&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="c1">// 没有陆地或者没有海洋返回-1
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">land&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">land&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nx">length&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">land&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">land&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">land&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">newX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newY&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">dx&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">dy&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">newX&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">newY&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">newX&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nx">length&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">newY&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="nx">length&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">grid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">newY&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">grid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">newY&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">grid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="nx">land&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">land&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newY&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span>
&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">land&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">land&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">grid&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="nx">y&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://xs-cw.github.io/categories/leetcode/" term="leetcode" label="leetcode"/><category scheme="https://xs-cw.github.io/tags/leetcode/" term="leetcode" label="leetcode"/></entry><entry><title type="text">WSL踩坑</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/wsl-problems/"/><id>https://xs-cw.github.io/posts/wsl-problems/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-11T19:29:24+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">wsl ubuntu 更新中断 更新中断后部分软件安装会报错,可以先将/var/lib/dpkg/inf……</summary><content type="html">&lt;h3 id="wsl-ubuntu-更新中断">wsl ubuntu 更新中断&lt;/h3>
&lt;p>更新中断后部分软件安装会报错,可以先将&lt;code>/var/lib/dpkg/info&lt;/code>目录下对应的文件备份
然后再重新更新.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mv /var/lib/dpkg/info/&lt;span class="o">{&lt;/span>pkg&lt;span class="o">}&lt;/span>.postinst /var/lib/dpkg/info/&lt;span class="o">{&lt;/span>pkg&lt;span class="o">}&lt;/span>.postinst.bak
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://xs-cw.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/" term="软件使用" label="软件使用"/><category scheme="https://xs-cw.github.io/categories/%E9%97%AE%E9%A2%98/" term="问题" label="问题"/><category scheme="https://xs-cw.github.io/tags/wsl/" term="wsl" label="wsl"/><category scheme="https://xs-cw.github.io/tags/%E8%B8%A9%E5%9D%91/" term="踩坑" label="踩坑"/></entry><entry><title type="text">WSL下oh-my-zsh安装</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/wsl-zsh/"/><id>https://xs-cw.github.io/posts/wsl-zsh/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-11T16:44:40+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">安装ZSH 以Ubuntu为例,安装步骤 1 2 3 4 5 # 安装zsh sudo apt-get install zsh # 安装oh-my……</summary><content type="html">&lt;h3 id="安装zsh">安装ZSH&lt;/h3>
&lt;ul>
&lt;li>以Ubuntu为例,安装步骤&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 安装zsh&lt;/span>
sudo apt-get install zsh
&lt;span class="c1"># 安装oh-my-zsh&lt;/span>
sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>oh-myzsh 其他自定义配置请&lt;a href="https://www.jianshu.com/p/ba782b57ae96">参考&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>windows文件夹显示问题
Ubuntu下没有&lt;code>/etc/DIR_COLORS&lt;/code>,所以需要以下操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">dircolors -p &amp;gt; ~/.dircolors
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>修改刚生成的文件,推荐vim,可以直接预览颜色&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">vim ~/.dircolors
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到如下一行,修改对应颜色&lt;/p>
&lt;pre>&lt;code>OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not sticky
&lt;/code>&lt;/pre>&lt;p>例如改为黑色字体红色背景,颜色与背景&lt;a href="https://xs-cw.github.io/posts/wsl-zsh/#style">参考样式&lt;/a>&lt;/p>
&lt;pre>&lt;code>OTHER_WRITABLE 30;41 # dir that is other-writable (o+w) and not sticky
&lt;/code>&lt;/pre>&lt;p>让修改后的文件生效,将下面的代码添加到&lt;code>~/.zshrc&lt;/code>&lt;/p>
&lt;pre>&lt;code>eval &amp;quot;$(dircolors ~/.dircolors)&amp;quot;;
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>&lt;a name="style">常见样式参考&lt;/a>&lt;/p>
&lt;pre>&lt;code>文字效果
00 默认
01 加粗
04 下划线
05 闪烁
07 反显
08 隐藏
文字颜色
30 - 黑色
31 - 红色
32 - 绿色
33 - 黄色
34 - 蓝色
35 - 洋红色
36 - 蓝绿色
37 - 白色
背景颜色
40 - 黑色
41 - 红色
42 - 绿色
43 - 黄色
44 - 蓝色
45 - 洋红色
46 - 蓝绿色
47 - 白色
&lt;/code>&lt;/pre></content><category scheme="https://xs-cw.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/" term="软件使用" label="软件使用"/><category scheme="https://xs-cw.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/" term="开发环境" label="开发环境"/><category scheme="https://xs-cw.github.io/tags/wsl/" term="wsl" label="wsl"/><category scheme="https://xs-cw.github.io/tags/oh-my-zsh/" term="oh-my-zsh" label="oh-my-zsh"/></entry><entry><title type="text">WSL与vscode安装</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/wsl-install/"/><id>https://xs-cw.github.io/posts/wsl-install/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-11T15:34:29+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">安装WSL 启用WSL 以管理员身份运行 Pow­er­Shell (WIN+X)，输入下面……</summary><content type="html">&lt;h3 id="安装wsl">安装WSL&lt;/h3>
&lt;ul>
&lt;li>
&lt;h4 id="启用wsl">启用WSL&lt;/h4>
&lt;p>以管理员身份运行 Pow­er­Shell (WIN+X)，输入下面的命令开启 “适用于 Linux 的 Win­dows 子系统” 功能，并重启。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="nb">Enable-WindowsOptionalFeature&lt;/span> &lt;span class="n">-Online&lt;/span> &lt;span class="n">-FeatureName&lt;/span> &lt;span class="nb">Microsoft-Windows&lt;/span>&lt;span class="n">-Subsystem-Linux&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;h4 id="使用-lxrunoffline-安装-wsl">使用 LxRunOffline 安装 WSL&lt;/h4>
&lt;p>下载解压 &lt;a href="https://p3terx.com/archives/manage-wsl-with-lxrunoffline.html">LxRunOffline&lt;/a> ，并设置环境变量以便使用&lt;code>lxrunoffline&lt;/code>命令。&lt;/p>
&lt;p>下载 &lt;a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">WSL 官方离线包&lt;/a>，解压后可得到名为 &lt;code>install.tar.gz&lt;/code> 的文件。&lt;/p>
&lt;p>输入以下命令进行安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">lxrunoffline i -n &amp;lt;WSL名称&amp;gt; -d &amp;lt;安装路径&amp;gt; -f &amp;lt;安装包路径&amp;gt;install.tar.gz
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>加入&lt;code>-s&lt;/code>参数可在桌面创建快捷方式。
其他lxrunoffline 命令细节,请&lt;a href="https://p3terx.com/archives/manage-wsl-with-lxrunoffline.html">参考&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;h4 id="修改wsl目录映射关系">修改WSL目录映射关系&lt;/h4>
&lt;p>wsl docker安装,需要修改目录映射
Windows 10 18.03+ 操作方式 &lt;code>sudo nano /etc/wsl.conf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="k">[automount]&lt;/span>
&lt;span class="na">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">/&lt;/span>
&lt;span class="na">options&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;metadata&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其他低版本采用目录映射&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mkdir /c
sudo mount --bind /mnt/c /c
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>安装完成后退出wsl(ctrl+d), 然后&lt;code>WIN+L&lt;/code>再重新进入,就可以发现&lt;code>c&lt;/code>盘在根目录了&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;h3 id="安装vscode">安装vscode&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>指定插件下载路径&lt;/p>
&lt;p>下载安装vscode,默认插件安装路径在&lt;code>C:\Users\{USER}\.vscode\extensions&lt;/code>&lt;/p>
&lt;p>可以选择创建软链接的方式安装在其他目录,以减少C盘占用,使用管理员权限打开&lt;code>CMD&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 删除已存在的extensions目录&lt;/span>
rmdir /s/q extensions
&lt;span class="c1"># 创建软链接&lt;/span>
mklink /D &lt;span class="s2">&amp;#34;C:\Users\{USER}\.vscode\extensions&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;{指定目录}&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>安装remote-wsl&lt;/p>
&lt;p>打开wsl终端窗口，切换到&lt;code>~&lt;/code>目录，在终端中输入&lt;code>code-insiders&lt;/code>,执行完毕后
除了主题等插件外,其他插件会被安装到wsl内.且wsl和windows共享环境变量,
可以在wsl中直接调用exe程序(需要带上.exe后缀)更多操作请查看&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/interop">官方文档&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></content><category scheme="https://xs-cw.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/" term="软件使用" label="软件使用"/><category scheme="https://xs-cw.github.io/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/" term="开发环境" label="开发环境"/><category scheme="https://xs-cw.github.io/tags/wsl/" term="wsl" label="wsl"/><category scheme="https://xs-cw.github.io/tags/vscode/" term="vscode" label="vscode"/><category scheme="https://xs-cw.github.io/tags/lxrunoffline/" term="LxRunOffline" label="LxRunOffline"/></entry><entry><title type="text">Leetcode986</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/leetcode986/"/><id>https://xs-cw.github.io/posts/leetcode986/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-08T14:45:17+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">986. 区间列表的交集 给定两个由一些闭区间组成的列表，每个区间列表都是成对不相交的，并且已……</summary><content type="html">&lt;h2 id="986-区间列表的交集">986. 区间列表的交集&lt;/h2>
&lt;p>给定两个由一些闭区间组成的列表，每个区间列表都是成对不相交的，并且已经排序。&lt;/p>
&lt;p>返回这两个区间列表的交集。&lt;/p>
&lt;p>（形式上，闭区间 [a, b]（其中 a &amp;lt;= b）表示实数 x 的集合，而 a &amp;lt;= x &amp;lt;= b。两个闭区间的交集是一组实数，要么为空集，要么为闭区间。例如，[1, 3] 和 [2, 4] 的交集为 [2, 3]。）&lt;/p>
&lt;p>&lt;strong>示例：&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://xs-cw.github.io/img/interval1.png" alt="img">&lt;/p>
&lt;blockquote>
&lt;p>输入：A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
输出：[[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
注意：输入和所需的输出都是区间对象组成的列表，而不是数组或列表。&lt;/p>
&lt;/blockquote>
&lt;p>提示：&lt;/p>
&lt;ol>
&lt;li>&lt;code>0 &amp;lt;= A.length &amp;lt; 1000 &lt;/code>&lt;/li>
&lt;li>&lt;code>0 &amp;lt;= B.length &amp;lt; 1000&lt;/code>&lt;/li>
&lt;li>&lt;code>0 &amp;lt;= A[i].start, A[i].end, B[i].start, B[i].end &amp;lt; 10^9&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="思路">思路&lt;/h2>
&lt;p>遍历A,先判断两个区间是否有交集,如果有,则交集取&lt;code>max(A[i][0],B[j][0])&lt;/code>,&lt;code>min(A[i][1],B[j][1])&lt;/code>&lt;/p>
&lt;h2 id="代码">代码&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">intervalIntersection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">A&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">B&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[][]&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">([][]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">ii&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">ii&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="nx">ii&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">ii&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">ii&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">B&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">ii&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nx">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">ii&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">ii&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">ii&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">A&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">ii&lt;/span>&lt;span class="p">][&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">res&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">r&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="nx">res&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://xs-cw.github.io/categories/leetcode/" term="leetcode" label="leetcode"/><category scheme="https://xs-cw.github.io/tags/leetcode/" term="leetcode" label="leetcode"/></entry><entry><title type="text">Leetcode88</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/leetcode88/"/><id>https://xs-cw.github.io/posts/leetcode88/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-07T21:30:36+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">88. 合并两个有序数组 给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 num1 成为一……</summary><content type="html">&lt;h2 id="88-合并两个有序数组">88. 合并两个有序数组&lt;/h2>
&lt;p>给你两个有序整数数组 &lt;code>nums1&lt;/code> 和 &lt;code>nums2&lt;/code>，请你将 &lt;code>nums2&lt;/code> 合并到 &lt;code>nums1&lt;/code> 中，使 &lt;code>num1&lt;/code> 成为一个有序数组。&lt;/p>
&lt;h3 id="说明">说明:&lt;/h3>
&lt;ul>
&lt;li>初始化 &lt;code>nums1&lt;/code> 和 &lt;code>nums2&lt;/code> 的元素数量分别为 m 和 n 。&lt;/li>
&lt;li>你可以假设 &lt;code>nums1&lt;/code> 有足够的空间（空间大小大于或等于 m + n）来保存 &lt;code>nums2&lt;/code> 中的元素。&lt;/li>
&lt;/ul>
&lt;h2 id="示例">示例:&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="nx">输入&lt;/span>&lt;span class="p">:&lt;/span>
&lt;span class="nx">nums1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="nx">nums2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;span class="nx">输出&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="思路">思路&lt;/h2>
&lt;p>从&lt;code>nums1&lt;/code>的最后一个位置(&lt;code>i=len(nums1)-1&lt;/code>)开始依次填入两个数组中最大的;&lt;/p>
&lt;p>因为两个数组都是有序的,所以只需要从最后的位置比较即可;&lt;/p>
&lt;p>&lt;code>nums1&lt;/code>与&lt;code>nums2&lt;/code>比较下标为&lt;code>m-1&lt;/code>和&lt;code>n-1&lt;/code>,将两者中较大的移到&lt;code>nums1&lt;/code>的尾部;&lt;/p>
&lt;p>将取出数字的数组下标(m或者n)和&lt;code>i&lt;/code>都往前移动一步,直到&lt;code>nums2&lt;/code>取完.&lt;/p>
&lt;p>若&lt;code>nums1&lt;/code>的m&amp;lt;0,则只需要将&lt;code>nums2&lt;/code>的剩余数字依次填充到&lt;code>i&lt;/code>下标即可&lt;/p>
&lt;h2 id="代码">代码&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="kd">func&lt;/span> &lt;span class="nf">merge&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums1&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nums2&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nb">copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nums2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="k">return&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="o">--&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="o">--&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">nums1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">m&lt;/span> &lt;span class="p">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">nums1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="nx">nums2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">nums1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">nums2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">n&lt;/span>&lt;span class="o">--&lt;/span>
&lt;span class="k">continue&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="nx">nums1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">nums2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="nx">nums1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">nums1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">nums1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">m&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="nx">nums2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">m&lt;/span>&lt;span class="o">--&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></content><category scheme="https://xs-cw.github.io/categories/leetcode/" term="leetcode" label="leetcode"/><category scheme="https://xs-cw.github.io/tags/leetcode/" term="leetcode" label="leetcode"/></entry><entry><title type="text">Docker-Compose安装出错</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/docker-compose-error/"/><id>https://xs-cw.github.io/posts/docker-compose-error/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-04T21:05:39+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">1、安装docker-compose 首先检查Linux有没有安装Python-pip……</summary><content type="html">&lt;p>&lt;strong>1、安装docker-compose&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>首先检查Linux有没有安装Python-pip包，直接执行 &lt;code>yum install python-pip&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>没有python-pip包就执行命令 &lt;code>yum -y install epel-release&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行成功之后，再次执行&lt;code>yum install python-pip&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对安装好的pip进行升级 &lt;code>pip install --upgrade pip&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装好pip之后，就可以安装Docker-Compose了.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在linunx终端执行：&lt;code>pip install docker-compose&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>执行完之后，输入&lt;code>docker-compse -version&lt;/code>，报如下错误&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">Traceback &lt;span class="o">(&lt;/span>most recent call last&lt;span class="o">)&lt;/span>:
File &lt;span class="s2">&amp;#34;/usr/bin/docker-compose&amp;#34;&lt;/span>, line 7, in &amp;lt;module&amp;gt;
from compose.cli.main import main
File &lt;span class="s2">&amp;#34;/usr/lib/python2.7/site-packages/compose/cli/main.py&amp;#34;&lt;/span>, line 17, in &amp;lt;module&amp;gt;
import docker
File &lt;span class="s2">&amp;#34;/usr/lib/python2.7/site-packages/docker/__init__.py&amp;#34;&lt;/span>, line 2, in &amp;lt;module&amp;gt;
from .api import APIClient
File &lt;span class="s2">&amp;#34;/usr/lib/python2.7/site-packages/docker/api/__init__.py&amp;#34;&lt;/span>, line 2, in &amp;lt;module&amp;gt;
from .Client import APIClient
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>2、解决方法：&lt;/strong>&lt;/p>
&lt;p>卸载已经安装的Python的urllib3包&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip uninstall urllib3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后就能够成功安装python-urllib3软件包&lt;/p>
&lt;p>&lt;strong>3、运行certbot命令提示urllib3版本低&lt;/strong>&lt;/p>
&lt;p>如果你成功安装了python-urllib3软件包，在运行certbot命令时提示urllib3版本太低，可以使用pip命令升级urllib3包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">pip install --upgrade urllib3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行成功之后：&lt;code>docker-compose --version&lt;/code> 查看版本信息.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> &lt;span class="nv">$docker&lt;/span>-compose -version
docker-compose version 1.8.1, build 878cff1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本文来自&lt;a href="https://www.cnblogs.com">博客园&lt;/a>&lt;/p>
&lt;p>感谢作者&lt;a href="https://home.cnblogs.com/u/richiewlq/">Richie`&lt;/a>&lt;/p>
&lt;p>查看原文&lt;a href="https://www.cnblogs.com/richiewlq/p/9203504.html">CentOS7下安装Docker-Compose No module named 'requests.packages.urllib3'&lt;/a>&lt;/p></content><category scheme="https://xs-cw.github.io/categories/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/" term="软件使用" label="软件使用"/><category scheme="https://xs-cw.github.io/categories/docker/" term="docker" label="docker"/><category scheme="https://xs-cw.github.io/tags/docker-compose/" term="docker-compose" label="docker-compose"/></entry><entry><title type="text">系统安装找到启动路径</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/system-find-boot/"/><id>https://xs-cw.github.io/posts/system-find-boot/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-04T21:05:39+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">windows 系统安装启动盘启动时找不到启动路径 找BOOTMGR文件在那个盘符find /bootmgr 这样会在……</summary><content type="html">&lt;p>windows 系统安装启动盘启动时找不到启动路径&lt;/p>
&lt;ol>
&lt;li>找BOOTMGR文件在那个盘符&lt;code>find /bootmgr&lt;/code>&lt;/li>
&lt;li>这样会在所有的磁盘根目录寻找文件，找到文件后接着进入该盘符 &lt;code>root (hd0,0)&lt;/code>&lt;/li>
&lt;li>然后转交引导权&lt;code>chainloader /bootmgr&lt;/code>
再执行&lt;code>boot&lt;/code>
启动
这样就OK了~！&lt;/li>
&lt;/ol></content><category scheme="https://xs-cw.github.io/categories/%E7%B3%BB%E7%BB%9F/" term="系统" label="系统"/><category scheme="https://xs-cw.github.io/categories/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/" term="系统安装" label="系统安装"/><category scheme="https://xs-cw.github.io/tags/%E7%B3%BB%E7%BB%9F/" term="系统" label="系统"/></entry><entry><title type="text">Go项目标准结构</title><link rel="alternate" type="text/html" href="https://xs-cw.github.io/posts/go-project-layout/"/><id>https://xs-cw.github.io/posts/go-project-layout/</id><updated>2021-07-12T02:14:14+00:00</updated><published>2020-03-02T14:28:16+08:00</published><author><name>saltfish</name><uri>https://www.saltfish.fun/</uri><email>s4ltfish@gmail.com</email></author><rights>转载标明出处</rights><summary type="html">[`project-layout`](https://github.com/golang-standards/project-layout)项目总结了Go 项目的布局,这是Go应用程序项目的基本布局, 并不是Go核心开发团队定义的官方标准， 但是，这是Go生态系统中的一种常见的项目布局模式。</summary><content type="html">&lt;h2 id="go目录">Go目录&lt;/h2>
&lt;h3 id="cmd">&lt;code>/cmd&lt;/code>&lt;/h3>
&lt;p>该目录用于存放 Go 项目的入口，即 main.go。一般来说，我们应该在 &lt;code>cmd&lt;/code>目录下创建子目录，子目录名称代表可执行程序的名称（例如&lt;code>/cmd/myapp&lt;/code>）。上面列出的优秀开源项目基本上遵循了这一规则。
一般来说，该目录中的代码应该尽可能少。如果认为该代码可以导入并在其他项目中使用，那么它应该位于&lt;code>/pkg&lt;/code>目录中。如果该代码不可重用，或者不希望其他人重用它，则将该代码放在&lt;code>/internal&lt;/code>目录中。&lt;/p>
&lt;h3 id="internal">&lt;code>/internal&lt;/code>&lt;/h3>
&lt;p>这是 Go 包的一个特性，放在该包中的代码，表明只希望项目内部使用，是项目或库私有的，其他项目或库不能使用。请注意，不限于顶层internal目录，internal在项目树的任何级别上都可以有多个目录。
可以选择向内部包中添加一些额外的结构，以分隔共享和非共享内部代码。它不是必需的（尤其是对于较小的项目），但是最好有视觉提示来显示包的用途。实际应用程序代码可以进入&lt;code>/internal/app&lt;/code>目录（例如&lt;code>/internal/app/myapp&lt;/code>），而这些应用程序共享的代码可以进入&lt;code>/internal/pkg&lt;/code>目录（例如&lt;code>/internal/pkg/myprivlib&lt;/code>）。&lt;/p>
&lt;h3 id="pkg">&lt;code>/pkg&lt;/code>&lt;/h3>
&lt;p>该包可以和 &lt;code>internal&lt;/code>对应，是公开的。一般来说，放在该包的代码应该和具体业务无关，方便本项目和其他项目重用。当你决定将代码放入该包时，你应该对其负责，因为别人很可能使用它。
如果应用程序项目很小，并且嵌套的额外层次不会增加太多价值（除非您真的想要，请不要使用它。当它变得足够大并且您的根目录变得非常复杂时（特别是如果您有很多非Go应用程序组件），请考虑一下。&lt;/p>
&lt;h3 id="vendor">&lt;code>/vendor&lt;/code>&lt;/h3>
&lt;p>应用程序依存关系，&lt;code>GO1.13+&lt;/code>启用go module来代替，并不需要vendor目录了。&lt;/p>
&lt;h2 id="server-application目录">server application目录&lt;/h2>
&lt;h3 id="api">&lt;code>/api&lt;/code>&lt;/h3>
&lt;p>该目录用来存放 OpenAPI/Swagger 规则说明, JSON 格式定义, 协议定义文件等。也有可能用来存放具体的对外公开 API.&lt;/p>
&lt;h2 id="web-application-目录">web application 目录&lt;/h2>
&lt;h3 id="web">&lt;code>/web&lt;/code>&lt;/h3>
&lt;p>Web应用程序特定的组件：静态Web资产，服务器端模板和SPA。&lt;/p>
&lt;h2 id="common-application目录">common application目录&lt;/h2>
&lt;h3 id="configs">&lt;code>/configs&lt;/code>&lt;/h3>
&lt;p>配置文件模板或默认配置。&lt;/p>
&lt;h3 id="init">&lt;code>/init&lt;/code>&lt;/h3>
&lt;p>存放随着系统自动启动脚本，如：systemd, upstart, sysv；或者通过 supervisor 进行进程管理的脚本。&lt;/p>
&lt;h3 id="scripts">&lt;code>/scripts&lt;/code>&lt;/h3>
&lt;p>存放 build、install、analysis 等操作脚本。这些脚本使得项目根目录的 Makefile 很简洁。&lt;/p>
&lt;h3 id="build">&lt;code>/build&lt;/code>&lt;/h3>
&lt;p>该目录用于存放打包和持续集成相关脚本。将云（AMI），容器（Docker），操作系统（deb，rpm，pkg）软件包配置和脚本放在/build/package目录中。
将CI（travis，circle，drone）配置和脚本放在/build/ci目录中。请注意，某些配置项工具（例如Travis CI）对于其配置文件的位置非常挑剔。尝试将配置文件放在&lt;code>/build/ci&lt;/code>目录中，将它们链接到CI工具期望它们的位置（如果可能）。&lt;/p>
&lt;h3 id="deployments">&lt;code>/deployments&lt;/code>&lt;/h3>
&lt;p>IaaS，PaaS，系统和容器编排部署配置和模板（docker-compose，kubernetes / helm，mesos，terraform，bosh）。&lt;/p>
&lt;h3 id="test">&lt;code>/test&lt;/code>&lt;/h3>
&lt;p>一般用来存放除单元测试、基准测试之外的测试，比如集成测试、测试数据等。&lt;/p>
&lt;h2 id="其他目录">其他目录&lt;/h2>
&lt;h3 id="docs">&lt;code>/docs&lt;/code>&lt;/h3>
&lt;p>设计和用户文档（除了godoc生成的文档之外）。&lt;/p>
&lt;h3 id="tools">&lt;code>/tools&lt;/code>&lt;/h3>
&lt;p>存放项目的支持工具。请注意，这些工具可以从&lt;code>/pkg&lt;/code>和&lt;code>/internal&lt;/code>目录导入代码。&lt;/p>
&lt;h3 id="examples">&lt;code>/examples&lt;/code>&lt;/h3>
&lt;p>应用程序或公共库的示例。&lt;/p>
&lt;h3 id="third_party">&lt;code>/third_party&lt;/code>&lt;/h3>
&lt;p>外部帮助程序工具，分叉的代码和其他第三方工具（例如Swagger UI）。&lt;/p>
&lt;h3 id="githooks">&lt;code>/githooks&lt;/code>&lt;/h3>
&lt;p>githooks&lt;/p>
&lt;h3 id="assets">&lt;code>/assets&lt;/code>&lt;/h3>
&lt;p>与资源库一起使用的其他资产（图像，徽标等）。&lt;/p>
&lt;h3 id="website">&lt;code>/website&lt;/code>&lt;/h3>
&lt;p>如果不使用Github页面，则在这里放置项目的网站数据。&lt;/p>
&lt;h2 id="不应该拥有的目录">不应该拥有的目录&lt;/h2>
&lt;h3 id="src">&lt;code>/src&lt;/code>&lt;/h3>
&lt;p>有些Go项目确实有一个&lt;code>src&lt;/code>文件夹，但通常是Java开发人员通用模式。如果可以，请尝试不要采用此Java模式。你真的不希望您的Go代码或Go项目看起来像Java😀&lt;/p>
&lt;p>不要混淆了项目的&lt;code>/src&lt;/code>和go语言的&lt;code>GOPATH&lt;/code>，如果你的项目里有&lt;code>/src&lt;/code>,那么你的项目路径可能就是&lt;code>/some/path/to/workspace/src/your_project/src/your_code.go&lt;/code>。go 1.11之后可以将项目放在&lt;code>GOPATH&lt;/code>之外的地方，但最好还是不要在项目里使用&lt;code>/src&lt;/code>目录&lt;/p></content><category scheme="https://xs-cw.github.io/categories/go%E8%AF%AD%E8%A8%80/" term="go语言" label="go语言"/><category scheme="https://xs-cw.github.io/tags/go%E8%AF%AD%E8%A8%80/" term="go语言" label="go语言"/><category scheme="https://xs-cw.github.io/tags/go/" term="go" label="go"/><category scheme="https://xs-cw.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/" term="项目结构" label="项目结构"/></entry></feed>